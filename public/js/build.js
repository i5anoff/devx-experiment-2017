!function e(t,n,o){function r(a,s){if(!n[a]){if(!t[a]){var u="function"==typeof require&&require;if(!s&&u)return u(a,!0);if(i)return i(a,!0);var l=new Error("Cannot find module '"+a+"'");throw l.code="MODULE_NOT_FOUND",l}var c=n[a]={exports:{}};t[a][0].call(c.exports,function(e){var n=t[a][1][e];return r(n?n:e)},c,c.exports,e,t,n,o)}return n[a].exports}for(var i="function"==typeof require&&require,a=0;a<o.length;a++)r(o[a]);return r}({1:[function(e,t,n){function o(e,t,n,o,i){for(var a=t.context.sampleRate,s=t.frequencyBinCount,u=r(o,a,s),l=r(i,a,s),c=l-u,h=0;l>u;u++)h+=n[u]/e;return 0===c?0:h/c}var r=e("audio-frequency-to-index");t.exports=o.bind(null,255),t.exports.floatData=o.bind(null,1)},{"audio-frequency-to-index":2}],2:[function(e,t,n){function o(e,t,n){var o=t/2,i=Math.round(e/o*n);return r(i,0,n)}var r=e("clamp");t.exports=o},{clamp:5}],3:[function(e,t,n){var o=e("./mime-types.json"),r={};Object.keys(o).forEach(function(e){var t=o[e];t.forEach(function(t){r[t]=e})}),t.exports=function(e){if(!e)throw new TypeError("must specify extension string");return 0===e.indexOf(".")&&(e=e.substring(1)),r[e.toLowerCase()]}},{"./mime-types.json":4}],4:[function(e,t,n){t.exports={"audio/midi":["mid","midi","kar","rmi"],"audio/mp4":["mp4a","m4a"],"audio/mpeg":["mpga","mp2","mp2a","mp3","m2a","m3a"],"audio/ogg":["oga","ogg","spx"],"audio/webm":["weba"],"audio/x-matroska":["mka"],"audio/x-mpegurl":["m3u"],"audio/wav":["wav"],"video/3gpp":["3gp"],"video/3gpp2":["3g2"],"video/mp4":["mp4","mp4v","mpg4"],"video/mpeg":["mpeg","mpg","mpe","m1v","m2v"],"video/ogg":["ogv"],"video/quicktime":["qt","mov"],"video/webm":["webm"],"video/x-f4v":["f4v"],"video/x-fli":["fli"],"video/x-flv":["flv"],"video/x-m4v":["m4v"],"video/x-matroska":["mkv","mk3d","mks"]}},{}],5:[function(e,t,n){function o(e,t,n){return n>t?t>e?t:e>n?n:e:n>e?n:e>t?t:e}t.exports=o},{}],6:[function(e,t,n){function o(e,t){return Math.pow(e[0]-t[0],2)+Math.pow(e[1]-t[1],2)+Math.pow(e[2]-t[2],2)}var r=e("color-name"),i={};for(var a in r)r.hasOwnProperty(a)&&(i[r[a]]=a);var s=t.exports={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};for(var u in s)if(s.hasOwnProperty(u)){if(!("channels"in s[u]))throw new Error("missing channels property: "+u);if(!("labels"in s[u]))throw new Error("missing channel labels property: "+u);if(s[u].labels.length!==s[u].channels)throw new Error("channel and label counts mismatch: "+u);var l=s[u].channels,c=s[u].labels;delete s[u].channels,delete s[u].labels,Object.defineProperty(s[u],"channels",{value:l}),Object.defineProperty(s[u],"labels",{value:c})}s.rgb.hsl=function(e){var t,n,o,r=e[0]/255,i=e[1]/255,a=e[2]/255,s=Math.min(r,i,a),u=Math.max(r,i,a),l=u-s;return u===s?t=0:r===u?t=(i-a)/l:i===u?t=2+(a-r)/l:a===u&&(t=4+(r-i)/l),t=Math.min(60*t,360),0>t&&(t+=360),o=(s+u)/2,n=u===s?0:.5>=o?l/(u+s):l/(2-u-s),[t,100*n,100*o]},s.rgb.hsv=function(e){var t,n,o,r=e[0],i=e[1],a=e[2],s=Math.min(r,i,a),u=Math.max(r,i,a),l=u-s;return n=0===u?0:l/u*1e3/10,u===s?t=0:r===u?t=(i-a)/l:i===u?t=2+(a-r)/l:a===u&&(t=4+(r-i)/l),t=Math.min(60*t,360),0>t&&(t+=360),o=u/255*1e3/10,[t,n,o]},s.rgb.hwb=function(e){var t=e[0],n=e[1],o=e[2],r=s.rgb.hsl(e)[0],i=1/255*Math.min(t,Math.min(n,o));return o=1-1/255*Math.max(t,Math.max(n,o)),[r,100*i,100*o]},s.rgb.cmyk=function(e){var t,n,o,r,i=e[0]/255,a=e[1]/255,s=e[2]/255;return r=Math.min(1-i,1-a,1-s),t=(1-i-r)/(1-r)||0,n=(1-a-r)/(1-r)||0,o=(1-s-r)/(1-r)||0,[100*t,100*n,100*o,100*r]},s.rgb.keyword=function(e){var t=i[e];if(t)return t;var n,a=1/0;for(var s in r)if(r.hasOwnProperty(s)){var u=r[s],l=o(e,u);a>l&&(a=l,n=s)}return n},s.keyword.rgb=function(e){return r[e]},s.rgb.xyz=function(e){var t=e[0]/255,n=e[1]/255,o=e[2]/255;t=t>.04045?Math.pow((t+.055)/1.055,2.4):t/12.92,n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92,o=o>.04045?Math.pow((o+.055)/1.055,2.4):o/12.92;var r=.4124*t+.3576*n+.1805*o,i=.2126*t+.7152*n+.0722*o,a=.0193*t+.1192*n+.9505*o;return[100*r,100*i,100*a]},s.rgb.lab=function(e){var t,n,o,r=s.rgb.xyz(e),i=r[0],a=r[1],u=r[2];return i/=95.047,a/=100,u/=108.883,i=i>.008856?Math.pow(i,1/3):7.787*i+16/116,a=a>.008856?Math.pow(a,1/3):7.787*a+16/116,u=u>.008856?Math.pow(u,1/3):7.787*u+16/116,t=116*a-16,n=500*(i-a),o=200*(a-u),[t,n,o]},s.hsl.rgb=function(e){var t,n,o,r,i,a=e[0]/360,s=e[1]/100,u=e[2]/100;if(0===s)return i=255*u,[i,i,i];n=.5>u?u*(1+s):u+s-u*s,t=2*u-n,r=[0,0,0];for(var l=0;3>l;l++)o=a+1/3*-(l-1),0>o&&o++,o>1&&o--,i=1>6*o?t+6*(n-t)*o:1>2*o?n:2>3*o?t+(n-t)*(2/3-o)*6:t,r[l]=255*i;return r},s.hsl.hsv=function(e){var t,n,o=e[0],r=e[1]/100,i=e[2]/100,a=r,s=Math.max(i,.01);return i*=2,r*=1>=i?i:2-i,a*=1>=s?s:2-s,n=(i+r)/2,t=0===i?2*a/(s+a):2*r/(i+r),[o,100*t,100*n]},s.hsv.rgb=function(e){var t=e[0]/60,n=e[1]/100,o=e[2]/100,r=Math.floor(t)%6,i=t-Math.floor(t),a=255*o*(1-n),s=255*o*(1-n*i),u=255*o*(1-n*(1-i));switch(o*=255,r){case 0:return[o,u,a];case 1:return[s,o,a];case 2:return[a,o,u];case 3:return[a,s,o];case 4:return[u,a,o];case 5:return[o,a,s]}},s.hsv.hsl=function(e){var t,n,o,r=e[0],i=e[1]/100,a=e[2]/100,s=Math.max(a,.01);return o=(2-i)*a,t=(2-i)*s,n=i*s,n/=1>=t?t:2-t,n=n||0,o/=2,[r,100*n,100*o]},s.hwb.rgb=function(e){var t,n,o,r,i=e[0]/360,a=e[1]/100,s=e[2]/100,u=a+s;u>1&&(a/=u,s/=u),t=Math.floor(6*i),n=1-s,o=6*i-t,0!==(1&t)&&(o=1-o),r=a+o*(n-a);var l,c,h;switch(t){default:case 6:case 0:l=n,c=r,h=a;break;case 1:l=r,c=n,h=a;break;case 2:l=a,c=n,h=r;break;case 3:l=a,c=r,h=n;break;case 4:l=r,c=a,h=n;break;case 5:l=n,c=a,h=r}return[255*l,255*c,255*h]},s.cmyk.rgb=function(e){var t,n,o,r=e[0]/100,i=e[1]/100,a=e[2]/100,s=e[3]/100;return t=1-Math.min(1,r*(1-s)+s),n=1-Math.min(1,i*(1-s)+s),o=1-Math.min(1,a*(1-s)+s),[255*t,255*n,255*o]},s.xyz.rgb=function(e){var t,n,o,r=e[0]/100,i=e[1]/100,a=e[2]/100;return t=3.2406*r+-1.5372*i+a*-.4986,n=r*-.9689+1.8758*i+.0415*a,o=.0557*r+i*-.204+1.057*a,t=t>.0031308?1.055*Math.pow(t,1/2.4)-.055:12.92*t,n=n>.0031308?1.055*Math.pow(n,1/2.4)-.055:12.92*n,o=o>.0031308?1.055*Math.pow(o,1/2.4)-.055:12.92*o,t=Math.min(Math.max(0,t),1),n=Math.min(Math.max(0,n),1),o=Math.min(Math.max(0,o),1),[255*t,255*n,255*o]},s.xyz.lab=function(e){var t,n,o,r=e[0],i=e[1],a=e[2];return r/=95.047,i/=100,a/=108.883,r=r>.008856?Math.pow(r,1/3):7.787*r+16/116,i=i>.008856?Math.pow(i,1/3):7.787*i+16/116,a=a>.008856?Math.pow(a,1/3):7.787*a+16/116,t=116*i-16,n=500*(r-i),o=200*(i-a),[t,n,o]},s.lab.xyz=function(e){var t,n,o,r=e[0],i=e[1],a=e[2];n=(r+16)/116,t=i/500+n,o=n-a/200;var s=Math.pow(n,3),u=Math.pow(t,3),l=Math.pow(o,3);return n=s>.008856?s:(n-16/116)/7.787,t=u>.008856?u:(t-16/116)/7.787,o=l>.008856?l:(o-16/116)/7.787,t*=95.047,n*=100,o*=108.883,[t,n,o]},s.lab.lch=function(e){var t,n,o,r=e[0],i=e[1],a=e[2];return t=Math.atan2(a,i),n=360*t/2/Math.PI,0>n&&(n+=360),o=Math.sqrt(i*i+a*a),[r,o,n]},s.lch.lab=function(e){var t,n,o,r=e[0],i=e[1],a=e[2];return o=a/360*2*Math.PI,t=i*Math.cos(o),n=i*Math.sin(o),[r,t,n]},s.rgb.ansi16=function(e){var t=e[0],n=e[1],o=e[2],r=1 in arguments?arguments[1]:s.rgb.hsv(e)[2];if(r=Math.round(r/50),0===r)return 30;var i=30+(Math.round(o/255)<<2|Math.round(n/255)<<1|Math.round(t/255));return 2===r&&(i+=60),i},s.hsv.ansi16=function(e){return s.rgb.ansi16(s.hsv.rgb(e),e[2])},s.rgb.ansi256=function(e){var t=e[0],n=e[1],o=e[2];if(t===n&&n===o)return 8>t?16:t>248?231:Math.round((t-8)/247*24)+232;var r=16+36*Math.round(t/255*5)+6*Math.round(n/255*5)+Math.round(o/255*5);return r},s.ansi16.rgb=function(e){var t=e%10;if(0===t||7===t)return e>50&&(t+=3.5),t=t/10.5*255,[t,t,t];var n=.5*(~~(e>50)+1),o=(1&t)*n*255,r=(t>>1&1)*n*255,i=(t>>2&1)*n*255;return[o,r,i]},s.ansi256.rgb=function(e){if(e>=232){var t=10*(e-232)+8;return[t,t,t]}e-=16;var n,o=Math.floor(e/36)/5*255,r=Math.floor((n=e%36)/6)/5*255,i=n%6/5*255;return[o,r,i]},s.rgb.hex=function(e){var t=((255&Math.round(e[0]))<<16)+((255&Math.round(e[1]))<<8)+(255&Math.round(e[2])),n=t.toString(16).toUpperCase();return"000000".substring(n.length)+n},s.hex.rgb=function(e){var t=e.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!t)return[0,0,0];var n=t[0];3===t[0].length&&(n=n.split("").map(function(e){return e+e}).join(""));var o=parseInt(n,16),r=o>>16&255,i=o>>8&255,a=255&o;return[r,i,a]},s.rgb.hcg=function(e){var t,n,o=e[0]/255,r=e[1]/255,i=e[2]/255,a=Math.max(Math.max(o,r),i),s=Math.min(Math.min(o,r),i),u=a-s;return t=1>u?s/(1-u):0,n=0>=u?0:a===o?(r-i)/u%6:a===r?2+(i-o)/u:4+(o-r)/u+4,n/=6,n%=1,[360*n,100*u,100*t]},s.hsl.hcg=function(e){var t=e[1]/100,n=e[2]/100,o=1,r=0;return o=.5>n?2*t*n:2*t*(1-n),1>o&&(r=(n-.5*o)/(1-o)),[e[0],100*o,100*r]},s.hsv.hcg=function(e){var t=e[1]/100,n=e[2]/100,o=t*n,r=0;return 1>o&&(r=(n-o)/(1-o)),[e[0],100*o,100*r]},s.hcg.rgb=function(e){var t=e[0]/360,n=e[1]/100,o=e[2]/100;if(0===n)return[255*o,255*o,255*o];var r=[0,0,0],i=t%1*6,a=i%1,s=1-a,u=0;switch(Math.floor(i)){case 0:r[0]=1,r[1]=a,r[2]=0;break;case 1:r[0]=s,r[1]=1,r[2]=0;break;case 2:r[0]=0,r[1]=1,r[2]=a;break;case 3:r[0]=0,r[1]=s,r[2]=1;break;case 4:r[0]=a,r[1]=0,r[2]=1;break;default:r[0]=1,r[1]=0,r[2]=s}return u=(1-n)*o,[255*(n*r[0]+u),255*(n*r[1]+u),255*(n*r[2]+u)]},s.hcg.hsv=function(e){var t=e[1]/100,n=e[2]/100,o=t+n*(1-t),r=0;return o>0&&(r=t/o),[e[0],100*r,100*o]},s.hcg.hsl=function(e){var t=e[1]/100,n=e[2]/100,o=n*(1-t)+.5*t,r=0;return o>0&&.5>o?r=t/(2*o):o>=.5&&1>o&&(r=t/(2*(1-o))),[e[0],100*r,100*o]},s.hcg.hwb=function(e){var t=e[1]/100,n=e[2]/100,o=t+n*(1-t);return[e[0],100*(o-t),100*(1-o)]},s.hwb.hcg=function(e){var t=e[1]/100,n=e[2]/100,o=1-n,r=o-t,i=0;return 1>r&&(i=(o-r)/(1-r)),[e[0],100*r,100*i]},s.apple.rgb=function(e){return[e[0]/65535*255,e[1]/65535*255,e[2]/65535*255]},s.rgb.apple=function(e){return[e[0]/255*65535,e[1]/255*65535,e[2]/255*65535]},s.gray.rgb=function(e){return[e[0]/100*255,e[0]/100*255,e[0]/100*255]},s.gray.hsl=s.gray.hsv=function(e){return[0,0,e[0]]},s.gray.hwb=function(e){return[0,100,e[0]]},s.gray.cmyk=function(e){return[0,0,0,e[0]]},s.gray.lab=function(e){return[e[0],0,0]},s.gray.hex=function(e){var t=255&Math.round(e[0]/100*255),n=(t<<16)+(t<<8)+t,o=n.toString(16).toUpperCase();return"000000".substring(o.length)+o},s.rgb.gray=function(e){var t=(e[0]+e[1]+e[2])/3;return[t/255*100]}},{"color-name":9}],7:[function(e,t,n){function o(e){var t=function(t){return void 0===t||null===t?t:(arguments.length>1&&(t=Array.prototype.slice.call(arguments)),e(t))};return"conversion"in e&&(t.conversion=e.conversion),t}function r(e){var t=function(t){if(void 0===t||null===t)return t;arguments.length>1&&(t=Array.prototype.slice.call(arguments));var n=e(t);if("object"==typeof n)for(var o=n.length,r=0;o>r;r++)n[r]=Math.round(n[r]);return n};return"conversion"in e&&(t.conversion=e.conversion),t}var i=e("./conversions"),a=e("./route"),s={},u=Object.keys(i);u.forEach(function(e){s[e]={},Object.defineProperty(s[e],"channels",{value:i[e].channels}),Object.defineProperty(s[e],"labels",{value:i[e].labels});var t=a(e),n=Object.keys(t);n.forEach(function(n){var i=t[n];s[e][n]=r(i),s[e][n].raw=o(i)})}),t.exports=s},{"./conversions":6,"./route":8}],8:[function(e,t,n){function o(){for(var e={},t=u.length,n=0;t>n;n++)e[u[n]]={distance:-1,parent:null};return e}function r(e){var t=o(),n=[e];for(t[e].distance=0;n.length;)for(var r=n.pop(),i=Object.keys(s[r]),a=i.length,u=0;a>u;u++){var l=i[u],c=t[l];-1===c.distance&&(c.distance=t[r].distance+1,c.parent=r,n.unshift(l))}return t}function i(e,t){return function(n){return t(e(n))}}function a(e,t){for(var n=[t[e].parent,e],o=s[t[e].parent][e],r=t[e].parent;t[r].parent;)n.unshift(t[r].parent),o=i(s[t[r].parent][r],o),r=t[r].parent;return o.conversion=n,o}var s=e("./conversions"),u=Object.keys(s);t.exports=function(e){for(var t=r(e),n={},o=Object.keys(t),i=o.length,s=0;i>s;s++){var u=o[s],l=t[u];null!==l.parent&&(n[u]=a(u,t))}return n}},{"./conversions":6}],9:[function(e,t,n){t.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},{}],10:[function(e,t,n){function o(e,t,n){return Math.min(Math.max(t,e),n)}function r(e){var t=e.toString(16).toUpperCase();return t.length<2?"0"+t:t}var i=e("color-name"),a=e("simple-swizzle"),s={};for(var u in i)i.hasOwnProperty(u)&&(s[i[u]]=u);var l=t.exports={to:{}};l.get=function(e){var t,n,o=e.substring(0,3).toLowerCase();switch(o){case"hsl":t=l.get.hsl(e),n="hsl";break;case"hwb":t=l.get.hwb(e),n="hwb";break;default:t=l.get.rgb(e),n="rgb"}return t?{model:n,value:t}:null},l.get.rgb=function(e){if(!e)return null;var t,n,r,a=/^#([a-f0-9]{3,4})$/i,s=/^#([a-f0-9]{6})([a-f0-9]{2})?$/i,u=/^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/,l=/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/,c=/(\D+)/,h=[0,0,0,1];if(t=e.match(s)){for(r=t[2],t=t[1],n=0;3>n;n++){var f=2*n;h[n]=parseInt(t.slice(f,f+2),16)}r&&(h[3]=Math.round(parseInt(r,16)/255*100)/100)}else if(t=e.match(a)){for(t=t[1],r=t[3],n=0;3>n;n++)h[n]=parseInt(t[n]+t[n],16);r&&(h[3]=Math.round(parseInt(r+r,16)/255*100)/100)}else if(t=e.match(u)){for(n=0;3>n;n++)h[n]=parseInt(t[n+1],0);t[4]&&(h[3]=parseFloat(t[4]))}else{if(!(t=e.match(l)))return(t=e.match(c))?"transparent"===t[1]?[0,0,0,0]:(h=i[t[1]])?(h[3]=1,h):null:null;for(n=0;3>n;n++)h[n]=Math.round(2.55*parseFloat(t[n+1]));t[4]&&(h[3]=parseFloat(t[4]))}for(n=0;3>n;n++)h[n]=o(h[n],0,255);return h[3]=o(h[3],0,1),h},l.get.hsl=function(e){if(!e)return null;var t=/^hsla?\(\s*([+-]?\d*[\.]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/,n=e.match(t);if(n){var r=parseFloat(n[4]),i=(parseFloat(n[1])%360+360)%360,a=o(parseFloat(n[2]),0,100),s=o(parseFloat(n[3]),0,100),u=o(isNaN(r)?1:r,0,1);return[i,a,s,u]}return null},l.get.hwb=function(e){if(!e)return null;var t=/^hwb\(\s*([+-]?\d*[\.]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/,n=e.match(t);if(n){var r=parseFloat(n[4]),i=(parseFloat(n[1])%360+360)%360,a=o(parseFloat(n[2]),0,100),s=o(parseFloat(n[3]),0,100),u=o(isNaN(r)?1:r,0,1);return[i,a,s,u]}return null},l.to.hex=function(){var e=a(arguments);return"#"+r(e[0])+r(e[1])+r(e[2])+(e[3]<1?r(Math.round(255*e[3])):"")},l.to.rgb=function(){var e=a(arguments);return e.length<4||1===e[3]?"rgb("+Math.round(e[0])+", "+Math.round(e[1])+", "+Math.round(e[2])+")":"rgba("+Math.round(e[0])+", "+Math.round(e[1])+", "+Math.round(e[2])+", "+e[3]+")"},l.to.rgb.percent=function(){var e=a(arguments),t=Math.round(e[0]/255*100),n=Math.round(e[1]/255*100),o=Math.round(e[2]/255*100);return e.length<4||1===e[3]?"rgb("+t+"%, "+n+"%, "+o+"%)":"rgba("+t+"%, "+n+"%, "+o+"%, "+e[3]+")"},l.to.hsl=function(){var e=a(arguments);return e.length<4||1===e[3]?"hsl("+e[0]+", "+e[1]+"%, "+e[2]+"%)":"hsla("+e[0]+", "+e[1]+"%, "+e[2]+"%, "+e[3]+")"},l.to.hwb=function(){var e=a(arguments),t="";return e.length>=4&&1!==e[3]&&(t=", "+e[3]),"hwb("+e[0]+", "+e[1]+"%, "+e[2]+"%"+t+")"},l.to.keyword=function(e){return s[e.slice(0,3)]}},{"color-name":9,"simple-swizzle":29}],11:[function(e,t,n){"use strict";function o(e,t){if(!(this instanceof o))return new o(e,t);if(t&&t in d&&(t=null),t&&!(t in h))throw new Error("Unknown model: "+t);var n,r;if(e)if(e instanceof o)this.model=e.model,this.color=e.color.slice(),this.valpha=e.valpha;else if("string"==typeof e){var i=c.get(e);if(null===i)throw new Error("Unable to parse color from string: "+e);this.model=i.model,r=h[this.model].channels,this.color=i.value.slice(0,r),this.valpha="number"==typeof i.value[r]?i.value[r]:1}else if(e.length){this.model=t||"rgb",r=h[this.model].channels;var a=f.call(e,0,r);this.color=l(a,r),this.valpha="number"==typeof e[r]?e[r]:1}else if("number"==typeof e)e&=16777215,this.model="rgb",this.color=[e>>16&255,e>>8&255,255&e],this.valpha=1;else{this.valpha=1;var s=Object.keys(e);"alpha"in e&&(s.splice(s.indexOf("alpha"),1),this.valpha="number"==typeof e.alpha?e.alpha:0);var u=s.sort().join("");if(!(u in p))throw new Error("Unable to parse color from object: "+JSON.stringify(e));this.model=p[u];var v=h[this.model].labels,A=[];for(n=0;n<v.length;n++)A.push(e[v[n]]);this.color=l(A)}else this.model="rgb",this.color=[0,0,0],this.valpha=1;if(m[this.model])for(r=h[this.model].channels,n=0;r>n;n++){var V=m[this.model][n];V&&(this.color[n]=V(this.color[n]))}this.valpha=Math.max(0,Math.min(1,this.valpha)),Object.freeze&&Object.freeze(this)}function r(e,t){return Number(e.toFixed(t))}function i(e){return function(t){return r(t,e)}}function a(e,t,n){return e=Array.isArray(e)?e:[e],e.forEach(function(e){(m[e]||(m[e]=[]))[t]=n}),e=e[0],function(o){var r;return arguments.length?(n&&(o=n(o)),r=this[e](),r.color[t]=o,r):(r=this[e]().color[t],n&&(r=n(r)),r)}}function s(e){return function(t){return Math.max(0,Math.min(e,t))}}function u(e){return Array.isArray(e)?e:[e]}function l(e,t){for(var n=0;t>n;n++)"number"!=typeof e[n]&&(e[n]=0);return e}var c=e("color-string"),h=e("color-convert"),f=[].slice,d=["keyword","gray","hex"],p={};Object.keys(h).forEach(function(e){p[f.call(h[e].labels).sort().join("")]=e});var m={};o.prototype={toString:function(){return this.string()},toJSON:function(){return this[this.model]()},string:function(e){var t=this.model in c.to?this:this.rgb();t=t.round("number"==typeof e?e:1);var n=1===t.valpha?t.color:t.color.concat(this.valpha);return c.to[t.model](n)},percentString:function(e){var t=this.rgb().round("number"==typeof e?e:1),n=1===t.valpha?t.color:t.color.concat(this.valpha);return c.to.rgb.percent(n)},array:function(){return 1===this.valpha?this.color.slice():this.color.concat(this.valpha)},object:function(){for(var e={},t=h[this.model].channels,n=h[this.model].labels,o=0;t>o;o++)e[n[o]]=this.color[o];return 1!==this.valpha&&(e.alpha=this.valpha),e},unitArray:function(){var e=this.rgb().color;return e[0]/=255,e[1]/=255,e[2]/=255,1!==this.valpha&&e.push(this.valpha),e},unitObject:function(){var e=this.rgb().object();return e.r/=255,e.g/=255,e.b/=255,1!==this.valpha&&(e.alpha=this.valpha),e},round:function(e){return e=Math.max(e||0,0),new o(this.color.map(i(e)).concat(this.valpha),this.model)},alpha:function(e){return arguments.length?new o(this.color.concat(Math.max(0,Math.min(1,e))),this.model):this.valpha},red:a("rgb",0,s(255)),green:a("rgb",1,s(255)),blue:a("rgb",2,s(255)),hue:a(["hsl","hsv","hsl","hwb","hcg"],0,function(e){return(e%360+360)%360}),saturationl:a("hsl",1,s(100)),lightness:a("hsl",2,s(100)),saturationv:a("hsv",1,s(100)),value:a("hsv",2,s(100)),chroma:a("hcg",1,s(100)),gray:a("hcg",2,s(100)),white:a("hwb",1,s(100)),wblack:a("hwb",2,s(100)),cyan:a("cmyk",0,s(100)),magenta:a("cmyk",1,s(100)),yellow:a("cmyk",2,s(100)),black:a("cmyk",3,s(100)),x:a("xyz",0,s(100)),y:a("xyz",1,s(100)),z:a("xyz",2,s(100)),l:a("lab",0,s(100)),a:a("lab",1),b:a("lab",2),keyword:function(e){return arguments.length?new o(e):h[this.model].keyword(this.color)},hex:function(e){return arguments.length?new o(e):c.to.hex(this.rgb().round().color)},rgbNumber:function(){var e=this.rgb().color;return(255&e[0])<<16|(255&e[1])<<8|255&e[2]},luminosity:function(){for(var e=this.rgb().color,t=[],n=0;n<e.length;n++){var o=e[n]/255;t[n]=.03928>=o?o/12.92:Math.pow((o+.055)/1.055,2.4)}return.2126*t[0]+.7152*t[1]+.0722*t[2]},contrast:function(e){var t=this.luminosity(),n=e.luminosity();return t>n?(t+.05)/(n+.05):(n+.05)/(t+.05)},level:function(e){var t=this.contrast(e);return t>=7.1?"AAA":t>=4.5?"AA":""},dark:function(){var e=this.rgb().color,t=(299*e[0]+587*e[1]+114*e[2])/1e3;return 128>t},light:function(){return!this.dark()},negate:function(){for(var e=this.rgb(),t=0;3>t;t++)e.color[t]=255-e.color[t];return e},lighten:function(e){var t=this.hsl();return t.color[2]+=t.color[2]*e,t},darken:function(e){var t=this.hsl();return t.color[2]-=t.color[2]*e,t},saturate:function(e){var t=this.hsl();return t.color[1]+=t.color[1]*e,t},desaturate:function(e){var t=this.hsl();return t.color[1]-=t.color[1]*e,t},whiten:function(e){var t=this.hwb();return t.color[1]+=t.color[1]*e,t},blacken:function(e){var t=this.hwb();return t.color[2]+=t.color[2]*e,t},grayscale:function(){var e=this.rgb().color,t=.3*e[0]+.59*e[1]+.11*e[2];return o.rgb(t,t,t)},fade:function(e){return this.alpha(this.valpha-this.valpha*e)},opaquer:function(e){return this.alpha(this.valpha+this.valpha*e)},rotate:function(e){var t=this.hsl(),n=t.color[0];return n=(n+e)%360,n=0>n?360+n:n,t.color[0]=n,t},mix:function(e,t){var n=this.rgb(),r=e.rgb(),i=void 0===t?.5:t,a=2*i-1,s=n.alpha()-r.alpha(),u=((a*s===-1?a:(a+s)/(1+a*s))+1)/2,l=1-u;return o.rgb(u*n.red()+l*r.red(),u*n.green()+l*r.green(),u*n.blue()+l*r.blue(),n.alpha()*i+r.alpha()*(1-i))}},Object.keys(h).forEach(function(e){if(-1===d.indexOf(e)){var t=h[e].channels;o.prototype[e]=function(){if(this.model===e)return new o(this);if(arguments.length)return new o(arguments,e);var n="number"==typeof arguments[t]?t:this.valpha;return new o(u(h[this.model][e].raw(this.color)).concat(n),e)},o[e]=function(n){return"number"==typeof n&&(n=l(f.call(arguments),t)),new o(n,e)}}}),t.exports=o},{"color-convert":7,"color-string":10}],12:[function(e,t,n){function o(e){return e||(e=new window.Audio),r(e,"audio/mpeg")?i:r(e,"audio/ogg")?a:null}function r(e,t){return e.canPlayType(t).replace(/no/,"")}var i=e("silent-mp3-datauri"),a=e("./silent-ogg-datauri");t.exports=o},{"./silent-ogg-datauri":13,"silent-mp3-datauri":27}],13:[function(e,t,n){t.exports="data:audio/ogg;base64,T2dnUwACAAAAAAAAAADqnjMlAAAAAOyyzPIBHgF2b3JiaXMAAAAAAUAfAABAHwAAQB8AAEAfAACZAU9nZ1MAAAAAAAAAAAAA6p4zJQEAAAANJGeqCj3//////////5ADdm9yYmlzLQAAAFhpcGguT3JnIGxpYlZvcmJpcyBJIDIwMTAxMTAxIChTY2hhdWZlbnVnZ2V0KQAAAAABBXZvcmJpcw9CQ1YBAAABAAxSFCElGVNKYwiVUlIpBR1jUFtHHWPUOUYhZBBTiEkZpXtPKpVYSsgRUlgpRR1TTFNJlVKWKUUdYxRTSCFT1jFloXMUS4ZJCSVsTa50FkvomWOWMUYdY85aSp1j1jFFHWNSUkmhcxg6ZiVkFDpGxehifDA6laJCKL7H3lLpLYWKW4q91xpT6y2EGEtpwQhhc+211dxKasUYY4wxxsXiUyiC0JBVAAABAABABAFCQ1YBAAoAAMJQDEVRgNCQVQBABgCAABRFcRTHcRxHkiTLAkJDVgEAQAAAAgAAKI7hKJIjSZJkWZZlWZameZaouaov+64u667t6roOhIasBACAAAAYRqF1TCqDEEPKQ4QUY9AzoxBDDEzGHGNONKQMMogzxZAyiFssLqgQBKEhKwKAKAAAwBjEGGIMOeekZFIi55iUTkoDnaPUUcoolRRLjBmlEluJMYLOUeooZZRCjKXFjFKJscRUAABAgAMAQICFUGjIigAgCgCAMAYphZRCjCnmFHOIMeUcgwwxxiBkzinoGJNOSuWck85JiRhjzjEHlXNOSuekctBJyaQTAAAQ4AAAEGAhFBqyIgCIEwAwSJKmWZomipamiaJniqrqiaKqWp5nmp5pqqpnmqpqqqrrmqrqypbnmaZnmqrqmaaqiqbquqaquq6nqrZsuqoum65q267s+rZru77uqapsm6or66bqyrrqyrbuurbtS56nqqKquq5nqq6ruq5uq65r25pqyq6purJtuq4tu7Js664s67pmqq5suqotm64s667s2rYqy7ovuq5uq7Ks+6os+75s67ru2rrwi65r66os674qy74x27bwy7ouHJMnqqqnqq7rmarrqq5r26rr2rqmmq5suq4tm6or26os67Yry7aumaosm64r26bryrIqy77vyrJui67r66Ys67oqy8Lu6roxzLat+6Lr6roqy7qvyrKuu7ru+7JuC7umqrpuyrKvm7Ks+7auC8us27oxuq7vq7It/KosC7+u+8Iy6z5jdF1fV21ZGFbZ9n3d95Vj1nVhWW1b+V1bZ7y+bgy7bvzKrQvLstq2scy6rSyvrxvDLux8W/iVmqratum6um7Ksq/Lui60dd1XRtf1fdW2fV+VZd+3hV9pG8OwjK6r+6os68Jry8ov67qw7MIvLKttK7+r68ow27qw3L6wLL/uC8uq277v6rrStXVluX2fsSu38QsAABhwAAAIMKEMFBqyIgCIEwBAEHIOKQahYgpCCKGkEEIqFWNSMuakZM5JKaWUFEpJrWJMSuaclMwxKaGUlkopqYRSWiqlxBRKaS2l1mJKqcVQSmulpNZKSa2llGJMrcUYMSYlc05K5pyUklJrJZXWMucoZQ5K6iCklEoqraTUYuacpA46Kx2E1EoqMZWUYgupxFZKaq2kFGMrMdXUWo4hpRhLSrGVlFptMdXWWqs1YkxK5pyUzDkqJaXWSiqtZc5J6iC01DkoqaTUYiopxco5SR2ElDLIqJSUWiupxBJSia20FGMpqcXUYq4pxRZDSS2WlFosqcTWYoy1tVRTJ6XFklKMJZUYW6y5ttZqDKXEVkqLsaSUW2sx1xZjjqGkFksrsZWUWmy15dhayzW1VGNKrdYWY40x5ZRrrT2n1mJNMdXaWqy51ZZbzLXnTkprpZQWS0oxttZijTHmHEppraQUWykpxtZara3FXEMpsZXSWiypxNhirLXFVmNqrcYWW62ltVprrb3GVlsurdXcYqw9tZRrrLXmWFNtBQAADDgAAASYUAYKDVkJAEQBAADGMMYYhEYpx5yT0ijlnHNSKucghJBS5hyEEFLKnINQSkuZcxBKSSmUklJqrYVSUmqttQIAAAocAAACbNCUWByg0JCVAEAqAIDBcTRNFFXVdX1fsSxRVFXXlW3jVyxNFFVVdm1b+DVRVFXXtW3bFn5NFFVVdmXZtoWiqrqybduybgvDqKqua9uybeuorqvbuq3bui9UXVmWbVu3dR3XtnXd9nVd+Bmzbeu2buu+8CMMR9/4IeTj+3RCCAAAT3AAACqwYXWEk6KxwEJDVgIAGQAAgDFKGYUYM0gxphhjTDHGmAAAgAEHAIAAE8pAoSErAoAoAADAOeecc84555xzzjnnnHPOOeecc44xxhhjjDHGGGOMMcYYY4wxxhhjjDHGGGOMMcYYY0wAwE6EA8BOhIVQaMhKACAcAABACCEpKaWUUkoRU85BSSmllFKqFIOMSkoppZRSpBR1lFJKKaWUIqWgpJJSSimllElJKaWUUkoppYw6SimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaVUSimllFJKKaWUUkoppRQAYPLgAACVYOMMK0lnhaPBhYasBAByAwAAhRiDEEJpraRUUkolVc5BKCWUlEpKKZWUUqqYgxBKKqmlklJKKbXSQSihlFBKKSWUUkooJYQQSgmhlFRCK6mEUkoHoYQSQimhhFRKKSWUzkEoIYUOQkmllNRCSB10VFIpIZVSSiklpZQ6CKGUklJLLZVSWkqpdBJSKamV1FJqqbWSUgmhpFZKSSWl0lpJJbUSSkklpZRSSymFVFJJJYSSUioltZZaSqm11lJIqZWUUkqppdRSSiWlkEpKqZSSUmollZRSaiGVlEpJKaTUSimlpFRCSamlUlpKLbWUSkmptFRSSaWUlEpJKaVSSksppRJKSqmllFpJKYWSUkoplZJSSyW1VEoKJaWUUkmptJRSSymVklIBAEAHDgAAAUZUWoidZlx5BI4oZJiAAgAAQABAgAkgMEBQMApBgDACAQAAAADAAAAfAABHARAR0ZzBAUKCwgJDg8MDAAAAAAAAAAAAAACAT2dnUwAEAAAAAAAAAADqnjMlAgAAADzQPmcBAQA="},{}],14:[function(e,t,n){(function(n){function o(e,t){function o(){u&&clearTimeout(u),s&&(s.pause(),s.removeEventListener("play",o,!1)),e(!0),e=a}if("function"!=typeof e)throw new TypeError("must specify a cb function");t="number"==typeof t?t:i;var s,u;try{s=new window.Audio;var l=r(s);if(!l)return n.nextTick(function(){e(!1)});u=setTimeout(function(){e(!1),e=a},t),s.autoplay=!0,s.volume=0,s.addEventListener("play",o,!1),s.src=l,s.load();var c=s.play();c&&"function"==typeof c.then&&(s.removeEventListener("play",o,!1),c.then(function(){o()},function(t){e(!1),e=a}))}catch(h){n.nextTick(function(){e(!1),e=a})}}var r=e("./lib/get-src"),i=300,a=function(){};t.exports=o}).call(this,e("_process"))},{"./lib/get-src":12,_process:25}],15:[function(e,t,n){function o(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function r(e){return"function"==typeof e}function i(e){return"number"==typeof e}function a(e){return"object"==typeof e&&null!==e}function s(e){return void 0===e}t.exports=o,o.EventEmitter=o,o.prototype._events=void 0,o.prototype._maxListeners=void 0,o.defaultMaxListeners=10,o.prototype.setMaxListeners=function(e){if(!i(e)||0>e||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},o.prototype.emit=function(e){var t,n,o,i,u,l;if(this._events||(this._events={}),"error"===e&&(!this._events.error||a(this._events.error)&&!this._events.error.length)){if(t=arguments[1],t instanceof Error)throw t;var c=new Error('Uncaught, unspecified "error" event. ('+t+")");throw c.context=t,c}if(n=this._events[e],s(n))return!1;if(r(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:i=Array.prototype.slice.call(arguments,1),n.apply(this,i)}else if(a(n))for(i=Array.prototype.slice.call(arguments,1),l=n.slice(),o=l.length,u=0;o>u;u++)l[u].apply(this,i);return!0},o.prototype.addListener=function(e,t){var n;if(!r(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,r(t.listener)?t.listener:t),this._events[e]?a(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,a(this._events[e])&&!this._events[e].warned&&(n=s(this._maxListeners)?o.defaultMaxListeners:this._maxListeners,n&&n>0&&this._events[e].length>n&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace())),this},o.prototype.on=o.prototype.addListener,o.prototype.once=function(e,t){function n(){this.removeListener(e,n),o||(o=!0,t.apply(this,arguments))}if(!r(t))throw TypeError("listener must be a function");var o=!1;return n.listener=t,this.on(e,n),this},o.prototype.removeListener=function(e,t){var n,o,i,s;if(!r(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(n=this._events[e],i=n.length,o=-1,n===t||r(n.listener)&&n.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(a(n)){for(s=i;s-- >0;)if(n[s]===t||n[s].listener&&n[s].listener===t){o=s;break}if(0>o)return this;1===n.length?(n.length=0,delete this._events[e]):n.splice(o,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},o.prototype.removeAllListeners=function(e){var t,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(n=this._events[e],
r(n))this.removeListener(e,n);else if(n)for(;n.length;)this.removeListener(e,n[n.length-1]);return delete this._events[e],this},o.prototype.listeners=function(e){var t;return t=this._events&&this._events[e]?r(this._events[e])?[this._events[e]]:this._events[e].slice():[]},o.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(r(t))return 1;if(t)return t.length}return 0},o.listenerCount=function(e,t){return e.listenerCount(t)}},{}],16:[function(e,t,n){function o(e,t,n){if(!s(t))throw new TypeError("iterator must be a function");arguments.length<3&&(n=this),"[object Array]"===u.call(e)?r(e,t,n):"string"==typeof e?i(e,t,n):a(e,t,n)}function r(e,t,n){for(var o=0,r=e.length;r>o;o++)l.call(e,o)&&t.call(n,e[o],o,e)}function i(e,t,n){for(var o=0,r=e.length;r>o;o++)t.call(n,e.charAt(o),o,e)}function a(e,t,n){for(var o in e)l.call(e,o)&&t.call(n,e[o],o,e)}var s=e("is-function");t.exports=o;var u=Object.prototype.toString,l=Object.prototype.hasOwnProperty},{"is-function":22}],17:[function(e,t,n){(function(e){var n;n="undefined"!=typeof window?window:"undefined"!=typeof e?e:"undefined"!=typeof self?self:{},t.exports=n}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],18:[function(e,t,n){t.exports=function(e){"string"==typeof e&&(e=[e]);for(var t=[].slice.call(arguments,1),n=[],o=0;o<e.length-1;o++)n.push(e[o],t[o]||"");return n.push(e[o]),n.join("")}},{}],19:[function(e,t,n){function o(e){var t=window.AudioContext||window.webkitAudioContext;e="number"==typeof e?e:44100;var n=new t;if(/(iPhone|iPad)/i.test(navigator.userAgent)&&n.sampleRate!==e){var o=n.createBuffer(1,1,e),r=n.createBufferSource();r.buffer=o,r.connect(n.destination),r.start(0),r.disconnect(),n.close(),n=new t}return n}t.exports=o},{}],20:[function(e,t,n){"use strict";t.exports=function(e){return e&&"string"!=typeof e?e instanceof Array||Array.isArray(e)||e.length>=0&&(e.splice instanceof Function||Object.getOwnPropertyDescriptor(e,e.length-1)&&"String"!==e.constructor.name):!1}},{}],21:[function(e,t,n){function o(e){return e&&"object"==typeof e?"object"==typeof window&&"object"==typeof window.Node?e instanceof window.Node:"number"==typeof e.nodeType&&"string"==typeof e.nodeName:!1}t.exports=o},{}],22:[function(e,t,n){function o(e){var t=r.call(e);return"[object Function]"===t||"function"==typeof e&&"[object RegExp]"!==t||"undefined"!=typeof window&&(e===window.setTimeout||e===window.alert||e===window.confirm||e===window.prompt)}t.exports=o;var r=Object.prototype.toString},{}],23:[function(e,t,n){"use strict";function o(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}function r(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;10>n;n++)t["_"+String.fromCharCode(n)]=n;var o=Object.getOwnPropertyNames(t).map(function(e){return t[e]});if("0123456789"!==o.join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(i){return!1}}var i=Object.getOwnPropertySymbols,a=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;t.exports=r()?Object.assign:function(e,t){for(var n,r,u=o(e),l=1;l<arguments.length;l++){n=Object(arguments[l]);for(var c in n)a.call(n,c)&&(u[c]=n[c]);if(i){r=i(n);for(var h=0;h<r.length;h++)s.call(n,r[h])&&(u[r[h]]=n[r[h]])}}return u}},{}],24:[function(e,t,n){var o=e("trim"),r=e("for-each"),i=function(e){return"[object Array]"===Object.prototype.toString.call(e)};t.exports=function(e){if(!e)return{};var t={};return r(o(e).split("\n"),function(e){var n=e.indexOf(":"),r=o(e.slice(0,n)).toLowerCase(),a=o(e.slice(n+1));"undefined"==typeof t[r]?t[r]=a:i(t[r])?t[r].push(a):t[r]=[t[r],a]}),t}},{"for-each":16,trim:32}],25:[function(e,t,n){function o(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function i(e){if(h===setTimeout)return setTimeout(e,0);if((h===o||!h)&&setTimeout)return h=setTimeout,setTimeout(e,0);try{return h(e,0)}catch(t){try{return h.call(null,e,0)}catch(t){return h.call(this,e,0)}}}function a(e){if(f===clearTimeout)return clearTimeout(e);if((f===r||!f)&&clearTimeout)return f=clearTimeout,clearTimeout(e);try{return f(e)}catch(t){try{return f.call(null,e)}catch(t){return f.call(this,e)}}}function s(){v&&p&&(v=!1,p.length?m=p.concat(m):A=-1,m.length&&u())}function u(){if(!v){var e=i(s);v=!0;for(var t=m.length;t;){for(p=m,m=[];++A<t;)p&&p[A].run();A=-1,t=m.length}p=null,v=!1,a(e)}}function l(e,t){this.fun=e,this.array=t}function c(){}var h,f,d=t.exports={};!function(){try{h="function"==typeof setTimeout?setTimeout:o}catch(e){h=o}try{f="function"==typeof clearTimeout?clearTimeout:r}catch(e){f=r}}();var p,m=[],v=!1,A=-1;d.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];m.push(new l(e,t)),1!==m.length||v||i(u)},l.prototype.run=function(){this.fun.apply(null,this.array)},d.title="browser",d.browser=!0,d.env={},d.argv=[],d.version="",d.versions={},d.on=c,d.addListener=c,d.once=c,d.off=c,d.removeListener=c,d.removeAllListeners=c,d.emit=c,d.prependListener=c,d.prependOnceListener=c,d.listeners=function(e){return[]},d.binding=function(e){throw new Error("process.binding is not supported")},d.cwd=function(){return"/"},d.chdir=function(e){throw new Error("process.chdir is not supported")},d.umask=function(){return 0}},{}],26:[function(e,t,n){(function(e){t.exports=e.performance&&e.performance.now?function(){return performance.now()}:Date.now||function(){return+new Date}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],27:[function(e,t,n){t.exports="data:audio/mpeg;base64,//uQxAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAADAAAGhgBVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVWqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr///////////////////////////////////////////8AAAA5TEFNRTMuOThyAc0AAAAAAAAAABSAJAiqQgAAgAAABobxtI73AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//uQxAACFEII9ACZ/sJZwWEoEb8w/////N//////JcxjHjf+7/v/H2PzCCFAiDtGeyBCIx7bJJ1mmEEMy6g8mm2c8nrGABB4h2Mkmn//4z/73u773R5qHHu/j/w7Kxkzh5lWRWdsifCkNAnY9Zc1HvDAhjhSHdFkHFzLmabt/AQxSg2wwzLhHIJOBnAWwVY4zrhIYhhc2kvhYDfQ4hDi2Gmh5KyFn8EcGIrHAngNgIwVIEMf5bzbAiTRoAD///8z/KVhkkWEle6IX+d/z4fvH3BShK1e5kmjkCMoxVmXhd4ROlTKo3iipasvTilY21q19ta30/v/0/idPX1v8PNxJL6ramnOVsdvMv2akO0iSYIzdJFirtzWXCZicS9vHqvSKyqm5XJBdqBwPxyfJdykhWTZ0G0ZyTZGpLKxsNwwoRhsx3tZfhwmeOBVISm3impAC/IT/8hP/EKEM1KMdVdVKM2rHV4x7HVXZvbVVKN/qq8CiV9VL9jjH/6l6qf7MBCjZmOqsAibjcP+qqqv0oxqpa/NVW286hPo1nz2L/h8+jXt//uSxCmDU2IK/ECN98KKtE5IYzNoCfbw+u9i5r8PoadUMFPKqWL4LK3T/LCraMSHGkW4bpLXR/E6LlHOVQxmslKVJ8IULktMN06N0FKCpHCoYsjC4F+Z0NVqdNFoGSTjSiyjzLdnZ2fNqTi2eHKONONKLMPMKLONKLMPQRJGlFxZRoKcJFAYEeIFiRQkUWUeYfef//Ko04soswso40UJAgMw8wosososy0EalnZyjQUGBRQGIFggOWUacWUeYmuadrZziQKKEgQsQLAhQkUJAgMQDghltLO1onp0cpkNInSFMqlYeSEJ5AHsqFdOwy1DA2sRmRJKxdKRfLhfLw5BzUxBTUUzLjk4LjJVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVUxBTUUzLjk4LjJVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7ksRRA8AAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVU="},{}],28:[function(e,t,n){function o(e,t,n){n=n||{},Array.isArray(t)||(t=[t]);var o=n.element||document.createElement(e);return n.loop&&o.setAttribute("loop","loop"),n.muted&&o.setAttribute("muted","muted"),n.autoplay&&o.setAttribute("autoplay","autoplay"),n.controls&&o.setAttribute("controls","controls"),n.crossOrigin&&o.setAttribute("crossorigin",n.crossOrigin),n.preload&&o.setAttribute("preload",n.preload),n.poster&&o.setAttribute("poster",n.poster),"undefined"!=typeof n.volume&&o.setAttribute("volume",n.volume),t=t.filter(Boolean),t.forEach(function(e){o.appendChild(r(e))}),o}function r(e){if(a(e))return e;if("string"==typeof e&&(e={src:e},e.src)){var t=i(e.src);t&&(e.type=s(t))}var n=document.createElement("source");return e.src&&n.setAttribute("src",e.src),e.type&&n.setAttribute("type",e.type),n}function i(e){var t=e.lastIndexOf(".");return 0>=t||t===e.length-1?null:e.substring(t+1)}var a=e("is-dom"),s=e("browser-media-mime-type");t.exports.video=o.bind(null,"video"),t.exports.audio=o.bind(null,"audio")},{"browser-media-mime-type":3,"is-dom":21}],29:[function(e,t,n){"use strict";var o=e("is-arrayish"),r=Array.prototype.concat,i=Array.prototype.slice,a=t.exports=function(e){for(var t=[],n=0,a=e.length;a>n;n++){var s=e[n];o(s)?t=r.call(t,i.call(s)):t.push(s)}return t};a.wrap=function(e){return function(){return e(a(arguments))}}},{"is-arrayish":20}],30:[function(e,t,n){function o(e,t){function n(t){function n(n){if(t!==n&&(o(),!n.defaultPrevented)){var r=t.preventDefault,i=t.stopPropagation;n.stopPropagation=function(){i.call(t),i.call(n)},n.preventDefault=function(){r.call(t),r.call(n)},e.call(s,n)}}function o(e){t!==e&&(clearTimeout(u),r.forEach(function(e){document.removeEventListener(e,o)}),i.forEach(function(e){document.removeEventListener(e,n)}))}if(t.touches&&!(t.touches.length>1)){var s=this,u=setTimeout(o,a);r.forEach(function(e){document.addEventListener(e,o)}),i.forEach(function(e){document.addEventListener(e,n)})}}t=t||{};var a=t.timeout||o.timeout;return n.handler=e,n}var r=["touchmove","touchcancel","touchstart"],i=["touchend"];t.exports=o,o.timeout=200},{}],31:[function(e,t,n){t.exports=function(e){function t(t,n){function o(){return 2*Math.PI/60/60*P.autoRotateSpeed}function r(){return Math.pow(.95,P.zoomSpeed)}function i(e){H.theta-=e}function a(e){H.phi-=e}function s(t){P.object instanceof e.PerspectiveCamera?I/=t:P.object instanceof e.OrthographicCamera?(P.object.zoom=Math.max(P.minZoom,Math.min(P.maxZoom,P.object.zoom*t)),P.object.updateProjectionMatrix(),Y=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),P.enableZoom=!1)}function u(t){P.object instanceof e.PerspectiveCamera?I*=t:P.object instanceof e.OrthographicCamera?(P.object.zoom=Math.max(P.minZoom,Math.min(P.maxZoom,P.object.zoom/t)),P.object.updateProjectionMatrix(),Y=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),P.enableZoom=!1)}function l(e){W.set(e.clientX,e.clientY)}function c(e){$.set(e.clientX,e.clientY)}function h(e){Z.set(e.clientX,e.clientY)}function f(e){X.set(e.clientX,e.clientY),J.subVectors(X,W);var t=P.domElement===document?P.domElement.body:P.domElement;i(2*Math.PI*J.x/t.clientWidth*P.rotateSpeed),a(2*Math.PI*J.y/t.clientHeight*P.rotateSpeed),W.copy(X),P.update()}function d(e){Q.set(e.clientX,e.clientY),ee.subVectors(Q,$),ee.y>0?s(r()):ee.y<0&&u(r()),$.copy(Q),P.update()}function p(e){z.set(e.clientX,e.clientY),G.subVectors(z,Z),oe(G.x,G.y),Z.copy(z),P.update()}function m(e){}function v(e){e.deltaY<0?u(r()):e.deltaY>0&&s(r()),P.update()}function A(e){switch(e.keyCode){case P.keys.UP:oe(0,P.keyPanSpeed),P.update();break;case P.keys.BOTTOM:oe(0,-P.keyPanSpeed),P.update();break;case P.keys.LEFT:oe(P.keyPanSpeed,0),P.update();break;case P.keys.RIGHT:oe(-P.keyPanSpeed,0),P.update()}}function V(e){W.set(e.touches[0].pageX,e.touches[0].pageY)}function y(e){var t=e.touches[0].pageX-e.touches[1].pageX,n=e.touches[0].pageY-e.touches[1].pageY,o=Math.sqrt(t*t+n*n);$.set(0,o)}function g(e){Z.set(e.touches[0].pageX,e.touches[0].pageY)}function E(e){X.set(e.touches[0].pageX,e.touches[0].pageY),J.subVectors(X,W);var t=P.domElement===document?P.domElement.body:P.domElement;i(2*Math.PI*J.x/t.clientWidth*P.rotateSpeed),a(2*Math.PI*J.y/t.clientHeight*P.rotateSpeed),W.copy(X),P.update()}function b(e){var t=e.touches[0].pageX-e.touches[1].pageX,n=e.touches[0].pageY-e.touches[1].pageY,o=Math.sqrt(t*t+n*n);Q.set(0,o),ee.subVectors(Q,$),ee.y>0?u(r()):ee.y<0&&s(r()),$.copy(Q),P.update()}function w(e){z.set(e.touches[0].pageX,e.touches[0].pageY),G.subVectors(z,Z),oe(G.x,G.y),Z.copy(z),P.update()}function F(e){}function C(e){if(P.enabled!==!1){if(e.preventDefault(),e.button===P.mouseButtons.ORBIT){if(P.enableRotate===!1)return;l(e),L=j.ROTATE}else if(e.button===P.mouseButtons.ZOOM){if(P.enableZoom===!1)return;c(e),L=j.DOLLY}else if(e.button===P.mouseButtons.PAN){if(P.enablePan===!1)return;h(e),L=j.PAN}L!==j.NONE&&(document.addEventListener("mousemove",M,!1),document.addEventListener("mouseup",D,!1),P.dispatchEvent(R))}}function M(e){if(P.enabled!==!1)if(e.preventDefault(),L===j.ROTATE){if(P.enableRotate===!1)return;f(e)}else if(L===j.DOLLY){if(P.enableZoom===!1)return;d(e)}else if(L===j.PAN){if(P.enablePan===!1)return;p(e)}}function D(e){P.enabled!==!1&&(m(e),document.removeEventListener("mousemove",M,!1),document.removeEventListener("mouseup",D,!1),P.dispatchEvent(q),L=j.NONE)}function x(e){P.enabled===!1||P.enableZoom===!1||L!==j.NONE&&L!==j.ROTATE||(e.preventDefault(),e.stopPropagation(),v(e),P.dispatchEvent(R),P.dispatchEvent(q))}function k(e){P.enabled!==!1&&P.enableKeys!==!1&&P.enablePan!==!1&&A(e)}function T(e){if(P.enabled!==!1){switch(e.touches.length){case 1:if(P.enableRotate===!1)return;V(e),L=j.TOUCH_ROTATE;break;case 2:if(P.enableZoom===!1)return;y(e),L=j.TOUCH_DOLLY;break;case 3:if(P.enablePan===!1)return;g(e),L=j.TOUCH_PAN;break;default:L=j.NONE}L!==j.NONE&&P.dispatchEvent(R)}}function B(e){if(P.enabled!==!1)switch(e.preventDefault(),e.stopPropagation(),e.touches.length){case 1:if(P.enableRotate===!1)return;if(L!==j.TOUCH_ROTATE)return;E(e);break;case 2:if(P.enableZoom===!1)return;if(L!==j.TOUCH_DOLLY)return;b(e);break;case 3:if(P.enablePan===!1)return;if(L!==j.TOUCH_PAN)return;w(e);break;default:L=j.NONE}}function S(e){P.enabled!==!1&&(F(e),P.dispatchEvent(q),L=j.NONE)}function O(e){e.preventDefault()}this.object=t,this.domElement=void 0!==n?n:document,this.enabled=!0,this.target=new e.Vector3,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-(1/0),this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.25,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.enableKeys=!0,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40},this.mouseButtons={ORBIT:e.MOUSE.LEFT,ZOOM:e.MOUSE.MIDDLE,PAN:e.MOUSE.RIGHT},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this.getPolarAngle=function(){return N.phi},this.getAzimuthalAngle=function(){return N.theta},this.reset=function(){P.target.copy(P.target0),P.object.position.copy(P.position0),P.object.zoom=P.zoom0,P.object.updateProjectionMatrix(),P.dispatchEvent(_),P.update(),L=j.NONE},this.update=function(){var n=new e.Vector3,r=(new e.Quaternion).setFromUnitVectors(t.up,new e.Vector3(0,1,0)),a=r.clone().inverse(),s=new e.Vector3,u=new e.Quaternion;return function(){var e=P.object.position;return n.copy(e).sub(P.target),n.applyQuaternion(r),N.setFromVector3(n),P.autoRotate&&L===j.NONE&&i(o()),N.theta+=H.theta,N.phi+=H.phi,N.theta=Math.max(P.minAzimuthAngle,Math.min(P.maxAzimuthAngle,N.theta)),N.phi=Math.max(P.minPolarAngle,Math.min(P.maxPolarAngle,N.phi)),N.makeSafe(),N.radius*=I,N.radius=Math.max(P.minDistance,Math.min(P.maxDistance,N.radius)),P.target.add(K),n.setFromSpherical(N),n.applyQuaternion(a),e.copy(P.target).add(n),P.object.lookAt(P.target),P.enableDamping===!0?(H.theta*=1-P.dampingFactor,H.phi*=1-P.dampingFactor):H.set(0,0,0),I=1,K.set(0,0,0),Y||s.distanceToSquared(P.object.position)>U||8*(1-u.dot(P.object.quaternion))>U?(P.dispatchEvent(_),s.copy(P.object.position),u.copy(P.object.quaternion),Y=!1,!0):!1}}(),this.dispose=function(){P.domElement.removeEventListener("contextmenu",O,!1),P.domElement.removeEventListener("mousedown",C,!1),P.domElement.removeEventListener("wheel",x,!1),P.domElement.removeEventListener("touchstart",T,!1),P.domElement.removeEventListener("touchend",S,!1),P.domElement.removeEventListener("touchmove",B,!1),document.removeEventListener("mousemove",M,!1),document.removeEventListener("mouseup",D,!1),window.removeEventListener("keydown",k,!1)};var P=this,_={type:"change"},R={type:"start"},q={type:"end"},j={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_DOLLY:4,TOUCH_PAN:5},L=j.NONE,U=1e-6,N=new e.Spherical,H=new e.Spherical,I=1,K=new e.Vector3,Y=!1,W=new e.Vector2,X=new e.Vector2,J=new e.Vector2,Z=new e.Vector2,z=new e.Vector2,G=new e.Vector2,$=new e.Vector2,Q=new e.Vector2,ee=new e.Vector2,te=function(){var t=new e.Vector3;return function(e,n){t.setFromMatrixColumn(n,0),t.multiplyScalar(-e),K.add(t)}}(),ne=function(){var t=new e.Vector3;return function(e,n){t.setFromMatrixColumn(n,1),t.multiplyScalar(e),K.add(t)}}(),oe=function(){var t=new e.Vector3;return function(n,o){var r=P.domElement===document?P.domElement.body:P.domElement;if(P.object instanceof e.PerspectiveCamera){var i=P.object.position;t.copy(i).sub(P.target);var a=t.length();a*=Math.tan(P.object.fov/2*Math.PI/180),te(2*n*a/r.clientHeight,P.object.matrix),ne(2*o*a/r.clientHeight,P.object.matrix)}else P.object instanceof e.OrthographicCamera?(te(n*(P.object.right-P.object.left)/P.object.zoom/r.clientWidth,P.object.matrix),ne(o*(P.object.top-P.object.bottom)/P.object.zoom/r.clientHeight,P.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),P.enablePan=!1)}}();P.domElement.addEventListener("contextmenu",O,!1),P.domElement.addEventListener("mousedown",C,!1),P.domElement.addEventListener("wheel",x,!1),P.domElement.addEventListener("touchstart",T,!1),P.domElement.addEventListener("touchend",S,!1),P.domElement.addEventListener("touchmove",B,!1),window.addEventListener("keydown",k,!1),this.update()}return t.prototype=Object.create(e.EventDispatcher.prototype),t.prototype.constructor=t,Object.defineProperties(t.prototype,{center:{get:function(){return console.warn("THREE.OrbitControls: .center has been renamed to .target"),this.target}},noZoom:{get:function(){return console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),!this.enableZoom},set:function(e){console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),this.enableZoom=!e}},noRotate:{get:function(){return console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),!this.enableRotate},set:function(e){console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),this.enableRotate=!e}},noPan:{get:function(){return console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),!this.enablePan},set:function(e){console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),this.enablePan=!e}},noKeys:{get:function(){return console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),!this.enableKeys},set:function(e){console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),this.enableKeys=!e}},staticMoving:{get:function(){return console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),!this.enableDamping},set:function(e){console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),this.enableDamping=!e}},dynamicDampingFactor:{get:function(){return console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.dampingFactor},set:function(e){console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.dampingFactor=e}}}),t}},{}],32:[function(e,t,n){function o(e){return e.replace(/^\s*|\s*$/g,"")}n=t.exports=o,n.left=function(e){return e.replace(/^\s*/,"")},n.right=function(e){return e.replace(/\s*$/,"")}},{}],33:[function(e,t,n){function o(e,t,n){if(!(this instanceof o))return new o(e,t,n);if(t instanceof r||(n=t,t=null),n=n||{},this.ctx=t=t||new r,e instanceof AudioNode||(e=e instanceof Audio||e instanceof HTMLAudioElement?t.createMediaElementSource(e):t.createMediaStreamSource(e)),this.analyser=t.createAnalyser(),this.stereo=!!n.stereo,this.audible=n.audible!==!1,this.wavedata=null,this.freqdata=null,this.splitter=null,this.merger=null,this.source=e,this.stereo){this.analyser=[this.analyser],this.analyser.push(t.createAnalyser()),this.splitter=t.createChannelSplitter(2),this.merger=t.createChannelMerger(2),this.output=this.merger,this.source.connect(this.splitter);for(var i=0;2>i;i++)this.splitter.connect(this.analyser[i],i,0),this.analyser[i].connect(this.merger,0,i);this.audible&&this.merger.connect(t.destination)}else this.output=this.source,this.source.connect(this.analyser),this.audible&&this.analyser.connect(t.destination)}var r=window.AudioContext||window.webkitAudioContext;t.exports=o,o.prototype.waveform=function(e,t){e||(e=this.wavedata||(this.wavedata=new Uint8Array((this.analyser[0]||this.analyser).frequencyBinCount)));var n=this.stereo?this.analyser[t||0]:this.analyser;return n.getByteTimeDomainData(e),e},o.prototype.frequencies=function(e,t){e||(e=this.freqdata||(this.freqdata=new Uint8Array((this.analyser[0]||this.analyser).frequencyBinCount)));var n=this.stereo?this.analyser[t||0]:this.analyser;return n.getByteFrequencyData(e),e}},{}],34:[function(e,t,n){function o(e,t){if(!e)throw new TypeError("must specify a src parameter");return t=t||{},t.buffer?r(e,t):i(e,t)}var r=e("./lib/buffer-source"),i=e("./lib/media-source");t.exports=o},{"./lib/buffer-source":36,"./lib/media-source":39}],35:[function(e,t,n){function o(){var e=window.AudioContext||window.webkitAudioContext;return new e}t.exports=o},{}],36:[function(e,t,n){(function(n){function o(e,t){function o(e){a(v,e,function(e,t){return e?m.emit("error",e):(d=t,f&&(f.buffer=d),p=d.duration,A.buffer=d,void m.emit("load"))},function(e,t){m.emit("progress",e,t)},function(){m.emit("decoding")})}function c(){m.emit("end"),E=!1,g=0}function h(){f&&f.disconnect()}t=t||{};var f,d,p,m=new s,v=t.context||i(),A=v.createGain(),V=null,y=null,g=0,E=!1,b=t.loop;m.play=function(){if(!E){E=!0,t.autoResume!==!1&&l(m.context),h(),f=v.createBufferSource(),f.connect(m.node),f.onended=c,d&&(f.buffer=d),b&&(f.loop=!0,"number"==typeof t.loopStart&&(f.loopStart=t.loopStart),"number"==typeof t.loopEnd&&(f.loopEnd=t.loopEnd)),p&&g>p&&(g%=p);var e=g;f.start(0,e),V=u()}},m.pause=function(){E&&(E=!1,f.onended=null,f.stop(0),y=u(),g+=(y-V)/1e3)},m.stop=function(){m.pause(),c()},m.dispose=function(){h(),d=null},m.node=A,m.context=v,Object.defineProperties(m,{duration:{enumerable:!0,configurable:!0,get:function(){return p}},playing:{enumerable:!0,configurable:!0,get:function(){return E}},buffer:{enumerable:!0,configurable:!0,get:function(){return d}},volume:{enumerable:!0,configurable:!0,get:function(){return A.gain.value},set:function(e){A.gain.value=e}}}),"number"==typeof t.volume&&(m.volume=t.volume);var w=Array.isArray(e)?e:[e];w=w.filter(Boolean);var F=w.some(r);if(F){var C=w.filter(r)[0];"function"==typeof C.getAttribute?C=C.getAttribute("src"):"string"==typeof C.src&&(C=C.src),o(C)}else n.nextTick(function(){m.emit("error",r.createError(w))});return m}var r=e("./can-play-src"),i=e("./audio-context"),a=e("./xhr-audio"),s=e("events").EventEmitter,u=e("right-now"),l=e("./resume-context");t.exports=o}).call(this,e("_process"))},{"./audio-context":35,"./can-play-src":37,"./resume-context":40,"./xhr-audio":41,_process:25,events:15,"right-now":26}],37:[function(e,t,n){function o(e){if(!e)throw new TypeError("src cannot be empty");var t;if("function"==typeof e.getAttribute)t=e.getAttribute("type");else if("string"==typeof e){var n=i(e);n&&(t=s(n))}else t=e.type;if(!t)return!0;a||(a=new window.Audio);var o=a.canPlayType(t).replace(/no/,"");return Boolean(o)}function r(e){var t=new Error("This browser does not support any of the following sources:\n    "+e.join(", ")+"\nTry using an array of OGG, MP3 and WAV.");return t.type="AUDIO_FORMAT",t}function i(e){var t=e.lastIndexOf(".");if(!(0>=t||t===e.length-1))return e.substring(t+1)}var a,s=e("browser-media-mime-type");t.exports=o,t.exports.createError=r},{"browser-media-mime-type":3}],38:[function(e,t,n){function o(e,t,n){function o(r){e.removeEventListener(t,o,!1),n(r,e)}e.addEventListener(t,o,!1)}t.exports=o},{}],39:[function(e,t,n){(function(n){function o(e,t){function o(){var e=Array.prototype.slice.call(d.children),t=e.length,o=!1,r=function(n,i){o||(t--,console.warn("Error loading source: "+i.getAttribute("src")),0>=t&&(o=!0,e.forEach(function(e){e.removeEventListener("error",r,!1)}),h.emit("error",new Error("Could not play any of the supplied sources"))))},i=function(){h.emit("load")};d.readyState>=d.HAVE_ENOUGH_DATA?n.nextTick(i):(c(d,"canplay",i),c(d,"error",function(e){h.emit(new Error("Unknown error while loading <audio>"))}),e.forEach(function(e){c(e,"error",r)})),d.load()}t=a({},t);var h=new r;t.element||(t.element=new window.Audio);var f=t.volume;delete t.volume;var d=i(e,t),p=t.context||u(),m=p.createGain(),v=p.createMediaElementSource(d);v.connect(m),d.addEventListener("ended",function(){h.emit("end")}),d.addEventListener("play",function(){console.log("PLAY")});var A=t.loopStart,V=t.loopEnd,y="number"==typeof A&&isFinite(A),g="number"==typeof V&&isFinite(V),E=!1;(y||g)&&window.requestAnimationFrame(function F(){if("number"==typeof d.duration){var e=d.currentTime,t=g?Math.min(d.duration,V):d.duration;e>(A||0)&&(E=!0),y&&E&&A>e&&(d.currentTime=A),e>=t&&g&&(d.currentTime=y?A:0),window.requestAnimationFrame(F)}}),h.element=d,h.context=p,h.node=m,h.pause=d.pause.bind(d),h.play=function(){return t.autoResume!==!1&&s(h.context),d.play()},h.dispose=function(){},h.stop=function(){var e=h.playing;d.pause(),d.currentTime=0,E=!1,e&&h.emit("end")},Object.defineProperties(h,{duration:{enumerable:!0,configurable:!0,get:function(){return d.duration}},currentTime:{enumerable:!0,configurable:!0,get:function(){return d.currentTime}},playing:{enumerable:!0,configurable:!0,get:function(){return!d.paused}},volume:{enumerable:!0,configurable:!0,get:function(){return m.gain.value},set:function(e){m.gain.value=e}}}),"number"==typeof f&&(h.volume=f);var b=Array.isArray(e)?e:[e];b=b.filter(Boolean);var w=b.some(l);return w?o():n.nextTick(function(){h.emit("error",l.createError(b))}),h}var r=e("events").EventEmitter,i=e("simple-media-element").audio,a=e("object-assign"),s=e("./resume-context"),u=e("./audio-context"),l=e("./can-play-src"),c=e("./event-add-once");t.exports=o}).call(this,e("_process"))},{"./audio-context":35,"./can-play-src":37,"./event-add-once":38,"./resume-context":40,_process:25,events:15,"object-assign":23,"simple-media-element":28}],40:[function(e,t,n){t.exports=function(e){"suspended"===e.state&&"function"==typeof e.resume&&e.resume()}},{}],41:[function(e,t,n){function o(e,t,n,o,a){function s(t){a(),e.decodeAudioData(t,function(e){n(null,e)},function(){var e=new Error("Error decoding audio data");e.type="DECODE_AUDIO_DATA",n(e)})}var u=r({uri:t,responseType:"arraybuffer"},function(e,o,r){return/^2/.test(o.statusCode)||(e=new Error("status code "+o.statusCode+" requesting "+t)),e?n(e):void s(r)});i(u).on("data",function(e,t){o(e,t)})}var r=e("xhr"),i=e("xhr-progress");t.exports=o},{xhr:43,"xhr-progress":42}],42:[function(e,t,n){function o(e){function t(e){var t=e.lengthComputable?e.loaded/e.total:0;i||o.emit("data",t,e.total||null),i=1===t}function n(r){("load"===r.type||/^(ready|complete)$/g.test((r.currentTarget||r.srcElement).readyState))&&(i||(e.removeEventListener?(e.removeEventListener("load",n,!1),e.removeEventListener("progress",t,!1)):e.detatchEvent&&e.detatchEvent("onreadystatechange",n),o.emit("data",1,r.total||null),o.emit("done"),i=!0))}var o=new r,i=!1;return e.attachEvent?(e.attachEvent("onreadystatechange",n),o):(e.addEventListener("load",n,!1),e.addEventListener("progress",t,!1),o)}var r=e("events").EventEmitter;t.exports=o},{events:15}],43:[function(e,t,n){"use strict";function o(e,t){for(var n=0;n<e.length;n++)t(e[n])}function r(e){for(var t in e)if(e.hasOwnProperty(t))return!1;return!0}function i(e,t,n){var o=e;return h(t)?(n=t,"string"==typeof e&&(o={uri:e})):o=d(t,{uri:e}),o.callback=n,o}function a(e,t,n){return t=i(e,t,n),s(t)}function s(e){function t(){4===c.readyState&&setTimeout(i,0)}function n(){var e=void 0;if(e=c.response?c.response:c.responseText||u(c),g)try{e=JSON.parse(e)}catch(t){}return e}function o(e){return clearTimeout(p),e instanceof Error||(e=new Error(""+(e||"Unknown XMLHttpRequest Error"))),e.statusCode=0,l(e,E)}function i(){if(!d){var t;clearTimeout(p),t=e.useXDR&&void 0===c.status?200:1223===c.status?204:c.status;var o=E,r=null;return 0!==t?(o={body:n(),statusCode:t,method:v,headers:{},url:m,rawRequest:c},c.getAllResponseHeaders&&(o.headers=f(c.getAllResponseHeaders()))):r=new Error("Internal XMLHttpRequest Error"),l(r,o,o.body)}}if("undefined"==typeof e.callback)throw new Error("callback argument missing");var s=!1,l=function(t,n,o){s||(s=!0,e.callback(t,n,o))},c=e.xhr||null;c||(c=e.cors||e.useXDR?new a.XDomainRequest:new a.XMLHttpRequest);var h,d,p,m=c.url=e.uri||e.url,v=c.method=e.method||"GET",A=e.body||e.data,V=c.headers=e.headers||{},y=!!e.sync,g=!1,E={body:void 0,headers:{},statusCode:0,method:v,url:m,rawRequest:c};if("json"in e&&e.json!==!1&&(g=!0,V.accept||V.Accept||(V.Accept="application/json"),"GET"!==v&&"HEAD"!==v&&(V["content-type"]||V["Content-Type"]||(V["Content-Type"]="application/json"),A=JSON.stringify(e.json===!0?A:e.json))),c.onreadystatechange=t,c.onload=i,c.onerror=o,c.onprogress=function(){},c.onabort=function(){d=!0},c.ontimeout=o,c.open(v,m,!y,e.username,e.password),y||(c.withCredentials=!!e.withCredentials),!y&&e.timeout>0&&(p=setTimeout(function(){if(!d){d=!0,c.abort("timeout");var e=new Error("XMLHttpRequest timeout");e.code="ETIMEDOUT",o(e)}},e.timeout)),c.setRequestHeader)for(h in V)V.hasOwnProperty(h)&&c.setRequestHeader(h,V[h]);else if(e.headers&&!r(e.headers))throw new Error("Headers cannot be set on an XDomainRequest object");return"responseType"in e&&(c.responseType=e.responseType),"beforeSend"in e&&"function"==typeof e.beforeSend&&e.beforeSend(c),c.send(A||null),c}function u(e){if("document"===e.responseType)return e.responseXML;var t=e.responseXML&&"parsererror"===e.responseXML.documentElement.nodeName;return""!==e.responseType||t?null:e.responseXML}function l(){}var c=e("global/window"),h=e("is-function"),f=e("parse-headers"),d=e("xtend");t.exports=a,a.XMLHttpRequest=c.XMLHttpRequest||l,a.XDomainRequest="withCredentials"in new a.XMLHttpRequest?a.XMLHttpRequest:c.XDomainRequest,o(["get","put","post","patch","head","delete"],function(e){a["delete"===e?"del":e]=function(t,n,o){return n=i(t,n,o),n.method=e.toUpperCase(),s(n)}})},{"global/window":17,"is-function":22,"parse-headers":24,xtend:44}],44:[function(e,t,n){function o(){for(var e={},t=0;t<arguments.length;t++){var n=arguments[t];for(var o in n)r.call(n,o)&&(e[o]=n[o])}return e}t.exports=o;var r=Object.prototype.hasOwnProperty},{}],45:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function");
}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=e("./util/Utils"),s=o(a),u=e("./events/EventsManager"),l=o(u),c=e("./events/Events"),h=o(c),f=e("./managers/RafManager"),d=o(f),p=e("./managers/InteractionManager"),m=o(p),v=e("./managers/SoundManager"),A=o(v),V=e("./controllers/KeyboardController"),y=o(V),g=e("./controllers/EffectController"),E=o(g),b=e("./controllers/ShapeController"),w=o(b),F=e("./app/Supershape"),C=o(F),M=e("./app/Background"),D=o(M),x=e("./app/Circles"),k=o(x),T=e("./app/Branding"),B=o(T),S=e("./util/createApp"),O=e("glslify"),P=function(){function e(){var t=this;r(this,e),window.dev=!1,window.vjPlaying=!1,window.canStart=!1,this.render=this.render.bind(this),this.onMouseDown=this.onMouseDown.bind(this),this.onMouseUp=this.onMouseUp.bind(this),this.onPlayEffect=this.onPlayEffect.bind(this),this.onSplitEffect=this.onSplitEffect.bind(this),this.onSoundEnded=this.onSoundEnded.bind(this),this.onResumeVjing=this.onResumeVjing.bind(this),this.onPauseVjing=this.onPauseVjing.bind(this),this.time=Date.now(),this.smoothRotationX=0,this.smoothRotationY=0,this.$ui=document.querySelector(".ui"),this.$helper=this.$ui.querySelector(".helper"),this.$credits=this.$ui.querySelector(".credits"),this.$brand=this.$ui.querySelector(".brand--ui"),this.$logo=this.$ui.querySelector(".logo"),this.$crosses=this.$ui.querySelectorAll(".cross"),this.$restart=this.$ui.querySelector(".restart"),this.$brandCorner=document.querySelector(".brand--corner"),window.app=S({debug:!1}),window.app.camera.position.z=1200,window.app.camera.lookAt(new THREE.Vector3(0,0,0)),window.app.css3DCamera.position.z=1200,window.app.css3DCamera.lookAt(new THREE.Vector3(0,0,0)),window.app.render(),this.FXAAPass=new WAGNER.FXAAPass,this.postFXPass=new WAGNER.Pass,this.postFXPass.shader=WAGNER.processShader(WAGNER.basicVs,O(["#define GLSLIFY 1\nuniform sampler2D tInput;\n\nvarying vec2 vUv;\n\nuniform float divide;\nuniform float mirrorX; \nuniform float mirrorY; \nuniform float morph;\n\nvoid main() {\n    \n    vec2 uv = vUv;\n    \n    // Mirror x\n    if (mirrorX > 0.) {\n        uv.x = abs(vUv.x-.5)+.5;\n    }\n    \n    // Mirror y\n    if (mirrorY > 0.) {\n        uv.y = abs(vUv.y-.5)+.5;\n    }\n\n    // Split\n    uv *= divide; uv = mod(uv,vec2(1.));\n\n    vec4 color = texture2D(tInput, uv);\n\n    // Morph\n    if (morph > 0.) {\n        color = texture2D(tInput, vec2(sin(vUv.x * 3.14), sin(vUv.y * 3.14)));\n    }\n\n    gl_FragColor = color;\n\n}"])),this.postFXPass.shader.uniforms.divide.value=1,this.postFXPass.shader.uniforms.mirrorX.value=0,this.postFXPass.shader.uniforms.mirrorY.value=0,this.postFXPass.shader.uniforms.morph.value=0,d["default"].start(),m["default"].start(),A["default"].start(),y["default"].start(),E["default"].start(),w["default"].start(),this.branding=new B["default"](this.$ui),this.ui=new THREE.CSS3DObject(this.$ui),this.ui.position.x=18,this.ui.position.y=18,this.ui.position.z=100,window.app.css3DScene.add(this.ui),this.circles=new k["default"],this.circles.position.x=140,this.circles.position.y=18,this.circles.position.z=-1,window.app.scene.add(this.circles),this.background=new D["default"],this.background.position.x=18,this.background.position.y=18,this.background.position.z=0,window.app.scene.add(this.background),this.supershape=new C["default"](180),this.supershape.scale.x=this.supershape.scale.y=this.supershape.scale.z=.01,this.supershape.position.x=-18,this.supershape.position.y=-18,this.supershape.position.z=300,window.app.scene.add(this.supershape);var n=s["default"].getPalette();l["default"].emit(h["default"].PALETTE_CHANGE,n),d["default"].bind("main",this.render),l["default"].on(h["default"].MOUSE_DOWN,this.onMouseDown),l["default"].on(h["default"].MOUSE_UP,this.onMouseUp),l["default"].on(h["default"].PLAY_EFFECT,this.onPlayEffect),l["default"].on(h["default"].SPLIT_EFFECT,this.onSplitEffect),l["default"].on(h["default"].SOUND_ENDED,this.onSoundEnded),l["default"].on(h["default"].RESUME_VJING,this.onResumeVjing),l["default"].on(h["default"].PAUSE_VJING,this.onPauseVjing),window.addEventListener("resize",this.resize.bind(this),!0),TweenMax.delayedCall(.5,function(){t.display()})}return i(e,[{key:"display",value:function(){var e=this;this.displayTL=new TimelineMax({onComplete:function(){window.canStart=!0}}),this.displayTL.addCallback(function(){e.circles.display()},0),this.displayTL.to(this.background.material.uniforms.progress,.6,{value:1,ease:Power2.easeInOut},0),this.displayTL.to(this.$ui,1.2,{opacity:1,ease:Power2.easeOut},.4),this.displayTL.to(this.ui.position,1.2,{z:0,ease:Power2.easeOut},.4),this.displayTL.to(this.$helper,.6,{opacity:1,ease:Power2.easeOut},1)}},{key:"onSoundEnded",value:function(){var e=this;window.vjPlaying=!1,TweenMax.delayedCall(.6,function(){e.pauseVjing(!0)})}},{key:"onMouseDown",value:function(){window.vjPlaying||(this.supershape.display(),TweenMax.to([window.app.camera.position,window.app.css3DCamera.position],.6,{z:1400,ease:Power2.easeOut}),TweenMax.to([this.$helper,this.$logo,this.$restart,this.$credits],.3,{opacity:0,ease:Power2.easeOut}))}},{key:"onMouseUp",value:function(){window.vjPlaying||(window.vjPlaying=!0,this.playVjing(!0,!1))}},{key:"onPlayEffect",value:function(e){var t=e.disallow;if(this.postFXPass.shader.uniforms.divide.value=s["default"].range([1,1,2,2,4]),this.postFXPass.shader.uniforms.mirrorX.value=s["default"].lucky(2),this.postFXPass.shader.uniforms.mirrorY.value=s["default"].lucky(2),this.postFXPass.shader.uniforms.divide.value<4?this.postFXPass.shader.uniforms.morph.value=s["default"].lucky(2):this.postFXPass.shader.uniforms.morph.value=0,!t){var n=s["default"].getPalette();l["default"].emit(h["default"].PALETTE_CHANGE,n)}this.background.scale.x=this.background.scale.y=s["default"].range([1,6]),t||(this.$logo.style.opacity=~~(2*Math.random())),this.background.scale.x>1?TweenMax.to(window.app.camera.position,.15,{z:500*Math.random()+600,ease:Power2.easeOut}):TweenMax.to(window.app.camera.position,.15,{z:500*Math.random()+800,ease:Power2.easeOut})}},{key:"onSplitEffect",value:function(e){this.postFXPass.shader.uniforms.divide.value=e,this.postFXPass.shader.uniforms.morph.value=1}},{key:"onResumeVjing",value:function(){this.playVjing(!1)}},{key:"onPauseVjing",value:function(){this.pauseVjing()}},{key:"playVjing",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:!0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:!0;this.playTL&&this.playTL.kill(),this.pauseTL&&this.pauseTL.kill(),this.playTL=new TimelineMax({onComplete:function(){e&&A["default"].play(t)}}),this.playTL.to(this.background.scale,.3,{x:window.innerWidth/400,y:window.innerHeight/400,ease:Power2.easeIn},0),this.playTL.to([window.app.camera.position,window.app.css3DCamera.position],.6,{z:1200,ease:Power2.easeOut},0),this.playTL.to([this.$credits,this.$brand,this.$crosses],.3,{opacity:0,ease:Power2.easeOut},0),this.playTL.to(this.$brandCorner,.4,{opacity:1,ease:Power2.easeOut},.3)}},{key:"pauseVjing",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:!1;this.postFXPass.shader.uniforms.divide.value=1,this.postFXPass.shader.uniforms.mirrorX.value=0,this.postFXPass.shader.uniforms.mirrorY.value=0,this.postFXPass.shader.uniforms.morph.value=0,this.background.scale.x=window.innerWidth/400,this.background.scale.y=window.innerHeight/400,this.$logo.style.opacity=1,this.playTL&&this.playTL.kill(),this.pauseTL&&this.pauseTL.kill(),this.pauseTL=new TimelineMax,this.pauseTL.to(window.app.camera.position,.7,{z:1200,ease:Power2.easeOut},0),this.pauseTL.to(this.background.scale,.7,{x:1,y:1,ease:Power2.easeOut},0),this.pauseTL.to(this.supershape.scale,.7,{x:.7,y:.7,z:.7,ease:Power2.easeOut},0),this.pauseTL.to(this.$brandCorner,.3,{opacity:0,ease:Power2.easeOut},0),this.pauseTL.to([this.$ui,this.$crosses,this.$brand,this.$credits,this.$logo],1.2,{opacity:1,ease:Power2.easeOut},.7),t&&this.pauseTL.to(this.$restart,1.2,{opacity:1,ease:Power2.easeOut},.7),this.pauseTL.addCallback(function(){e.circles.bounce()},.3)}},{key:"render",value:function(){this.update(),window.app.css3DRenderer.render(window.app.css3DScene,window.app.css3DCamera),window.app.renderer.autoClearColor=!0,window.app.composer.reset(),window.app.composer.render(window.app.scene,window.app.camera),window.app.composer.pass(this.postFXPass),window.app.composer.pass(this.FXAAPass),window.app.composer.toScreen()}},{key:"update",value:function(){this.supershape.update(this.time);var e=s["default"].map(window.mouse.y,0,window.innerHeight,-.1,.1),t=s["default"].map(window.mouse.x,0,window.innerWidth,-.1,.1);this.smoothRotationX+=.1*(e-this.smoothRotationX),this.smoothRotationY+=.1*(t-this.smoothRotationY),window.app.scene.rotation.x=2*this.smoothRotationX,window.app.scene.rotation.y=2*this.smoothRotationY,window.app.scene.position.x=100*this.smoothRotationX,window.app.scene.position.y=100*this.smoothRotationY,window.app.css3DScene.rotation.x=this.smoothRotationX,window.app.css3DScene.rotation.y=this.smoothRotationY,window.app.css3DScene.position.x=75*this.smoothRotationX,window.app.css3DScene.position.y=75*this.smoothRotationY}},{key:"resize",value:function(){window.app.resize(window.innerWidth,window.innerHeight)}}]),e}();new P},{"./app/Background":46,"./app/Branding":47,"./app/Circles":48,"./app/Supershape":49,"./controllers/EffectController":52,"./controllers/KeyboardController":53,"./controllers/ShapeController":54,"./events/Events":55,"./events/EventsManager":56,"./managers/InteractionManager":57,"./managers/RafManager":58,"./managers/SoundManager":59,"./util/Utils":61,"./util/createApp":62,glslify:18}],46:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),u=e("../events/EventsManager"),l=o(u),c=e("../events/Events"),h=o(c),f=e("glslify"),d=function(e){function t(){r(this,t);var e=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.onPaletteChange=e.onPaletteChange.bind(e),e.geometry=new THREE.PlaneGeometry(600,600),e.material=new THREE.ShaderMaterial({vertexShader:f(["precision mediump float;\n#define GLSLIFY 1\n\nvarying vec2 vUv;\n\nvoid main() {\n\n    vUv = uv;\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\n}"]),fragmentShader:f(["#define GLSLIFY 1\nuniform sampler2D tInput;\n\nvarying vec2 vUv;\n\nuniform vec3 color;\nuniform float progress;\n\nvoid main() {\n\n    float alpha = vUv.x > progress ? 0.0 : 1.0;\n    gl_FragColor = vec4(color, alpha);\n\n}"]),uniforms:{color:{type:"c",value:new THREE.Color(16777215)},progress:{type:"c",value:0}},transparent:!0}),e.mesh=new THREE.Mesh(e.geometry,e.material),e.add(e.mesh),l["default"].on(h["default"].PALETTE_CHANGE,e.onPaletteChange),e}return a(t,e),s(t,[{key:"onPaletteChange",value:function(e){this.material.uniforms.color.value=new THREE.Color(e.background)}}]),t}(THREE.Object3D);n["default"]=d},{"../events/Events":55,"../events/EventsManager":56,glslify:18}],47:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=e("../events/EventsManager"),s=o(a),u=e("../events/Events"),l=o(u),c=e("color"),h=function(){function e(t){r(this,e),this.$view=t,this.$letters=this.$view.querySelectorAll(".logo__letter"),this.$lines=this.$view.querySelectorAll(".logo__line"),this.$helperAction=this.$view.querySelector(".helper__action"),this.$helperReaction=this.$view.querySelector(".helper__reaction"),this.$links=this.$view.querySelectorAll(".credit__link"),this.onPaletteChange=this.onPaletteChange.bind(this),this.stopPropagation=this.stopPropagation.bind(this);for(var n=0;n<this.$links.length;n++)this.$links[n].addEventListener("mousedown",this.stopPropagation),this.$links[n].addEventListener("mouseup",this.stopPropagation);s["default"].on(l["default"].PALETTE_CHANGE,this.onPaletteChange)}return i(e,[{key:"onPaletteChange",value:function(e){for(var t=c(e.background),n=t.hsl().darken(.25).rgb(),o=0;o<this.$letters.length;o++)this.$letters[o].style.color="rgb("+~~n.color[0]+", "+~~n.color[1]+", "+~~n.color[2]+")";for(var r=0;r<this.$lines.length;r++)this.$lines[r].style.backgroundColor="rgb("+~~n.color[0]+", "+~~n.color[1]+", "+~~n.color[2]+")";var i=t.luminosity();i>.7?(this.$helperAction.style.color="#333333",this.$helperReaction.style.color="#333333"):(this.$helperAction.style.color="#FFFFFF",this.$helperReaction.style.color="#FFFFFF")}},{key:"setWhiteMode",value:function(){for(var e=0;e<this.$letters.length;e++)this.$letters[e].style.color="#FFFFFF";for(var t=0;t<this.$lines.length;t++)this.$lines[t].style.backgroundColor="#FFFFFF"}},{key:"stopPropagation",value:function(e){e.stopPropagation()}}]),e}();n["default"]=h},{"../events/Events":55,"../events/EventsManager":56,color:11}],48:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),u=e("../events/EventsManager"),l=o(u),c=e("../events/Events"),h=o(c),f=function(e){function t(){r(this,t);var e=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));e.onMouseDown=e.onMouseDown.bind(e),e.material=new THREE.MeshBasicMaterial({color:14540253,transparent:!0}),e.meshes=[];for(var n=0;6>n;n++){var o=new THREE.RingGeometry(223+50*n,225+50*n,64,1),a=new THREE.Mesh(o,e.material);a.position.z=10*-(6-n)*4,a.initialDepth=a.position.z,a.scale.x=a.scale.y=.01,e.add(a),e.meshes[n]=a}return l["default"].on(h["default"].MOUSE_DOWN,e.onMouseDown),e}return a(t,e),s(t,[{key:"display",value:function(){for(var e=new TimelineMax,t=0;t<this.meshes.length;t++)e.to(this.meshes[t].scale,1.2,{x:.9,y:.9,ease:Power3.easeOut},.03*t)}},{key:"bounce",value:function(){for(var e=new TimelineMax,t=0;t<this.meshes.length;t++)e.fromTo(this.meshes[t].scale,.6,{x:.88,y:.88},{x:1,y:1,ease:Power2.easeOut},.06*t)}},{key:"hide",value:function(){}},{key:"onMouseDown",value:function(){for(var e=new TimelineMax,t=0;t<this.meshes.length;t++)e.to(this.meshes[t].scale,.6,{x:1.1,y:1.1,ease:Power2.easeOut},.06*t)}}]),t}(THREE.Object3D);n["default"]=f},{"../events/Events":55,"../events/EventsManager":56}],49:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),u=e("../events/EventsManager"),l=o(u),c=e("../events/Events"),h=o(c),f=e("../controllers/ShapeController"),d=o(f),p=e("glslify"),m=function(e){function t(e){r(this,t);var n=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));n.radius=e,n.onPaletteChange=n.onPaletteChange.bind(n),n.geometry=new THREE.Geometry;for(var o=.05,a=parseInt(2*Math.PI/o+1.3462),s=parseInt(Math.PI/o+1.5),u=0;a>u;u++)for(var c=-Math.PI+u*o,f=n.supershape(c,0,0,0,0,1,1),d=0;s>d;d++){var m=-Math.PI/2+d*o,v=n.supershape(m,0,0,0,0,1,1),A=f*Math.cos(c)*v*Math.cos(m)*30,V=f*Math.sin(c)*v*Math.cos(m)*30,y=v*Math.sin(m)*30;n.geometry.vertices.push(new THREE.Vector3(A,V,y))}for(var g=0;a-1>g;g++)for(var E=0;s-1>E;E++){var b=(g+1)*s+E,w=(g+1)*s+E+1,F=g*s+E+1,C=g*s+E;n.geometry.faces.push(new THREE.Face3(b,w,C)),n.geometry.faces.push(new THREE.Face3(w,F,C))}return n.geometry.computeFaceNormals(),n.geometry.computeVertexNormals(),n.material=new THREE.ShaderMaterial({vertexShader:p(["precision mediump float;\n#define GLSLIFY 1\n\nuniform mat4 u_projectionMat;\nuniform mat4 u_modelviewMat;\nuniform mat3 u_normalMat;\nuniform vec3 u_diffuse;\n\nvarying vec3 v_eyeNormal;\nvarying vec3 v_diffuse;\n\nvoid main() {\n\n    v_eyeNormal = normalMatrix * normal;\n    v_diffuse = u_diffuse;\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\n}"]),fragmentShader:p(["// Shader by @thomcc on Codepen https://codepen.io/thomcc/pen/lLFbw\n\nprecision mediump float;\n#define GLSLIFY 1\nvarying vec3 v_eyeNormal;\nvarying vec3 v_diffuse;\n\nuniform vec3 u_light;\nuniform vec3 u_ambient;\nuniform vec3 u_specular;\nuniform float u_shine;\nuniform float u_celShading;\n\nuniform vec3 color1;\nuniform vec3 color2;\nuniform vec3 color3;\nuniform vec3 color4;\nuniform vec3 color5;\n\nfloat celShade(float d) {\n    float E = 0.05;\n    d *= u_celShading;\n    float r = 1.0 / (u_celShading-0.5);\n    float fd = floor(d);\n    float dr = d * r;\n    if (d > fd-E && d < fd+E) {\n        float last = (fd - sign(d - fd))*r;\n        return mix(last, fd*r, \n        smoothstep((fd-E)*r, (fd+E)*r, dr));\n    } else {\n        return fd*r;\n    }\n}\n\nvoid main() {\n    vec3 en = normalize(v_eyeNormal);\n    vec3 ln = normalize(u_light);\n    vec3 hn = normalize(ln + vec3(0, 0, 1));\n    float E = 0.05;\n\n    float df = max(0.0, dot(en, ln));\n    float sf = max(0.0, dot(en, hn));\n\n    float cdf = celShade(df);  \n\n    sf = pow(sf, u_shine);\n\n    if (sf > 0.5 - E && sf < 0.5 + E) {\n        sf = smoothstep(0.5 - E, 0.5 + E, sf);\n    } else {\n        sf = step(0.5, sf);\n    }\n\n    float csf = sf;\n\n    vec3 color = u_ambient + cdf * v_diffuse + csf * u_specular;\n\n    if (color.g > 0.85) color = color4;\n    else if (color.g > 0.7) color = color3;\n    else if (color.g > 0.4) color = color2;\n    else color = color1;\n\n    gl_FragColor = vec4(color, 1.0);\n}"]),uniforms:{u_diffuse:{type:"c",value:new THREE.Color(53619)},u_light:{type:"v3",value:new THREE.Vector3(.25,.25,1)},u_ambient:{type:"v3",value:new THREE.Vector3(.1,.1,.1)},u_specular:{type:"v3",value:new THREE.Vector3(.5,.5,.5)},u_shine:{type:"f",value:1e3},u_celShading:{type:"f",value:10},color1:{type:"c",value:new THREE.Color(8720506)},color2:{type:"c",value:new THREE.Color(1447446)},color3:{type:"c",value:new THREE.Color(16777028)},color4:{type:"c",value:new THREE.Color(16756018)}}}),n.outlineMaterial=new THREE.ShaderMaterial({vertexShader:p(["precision mediump float;\n#define GLSLIFY 1\n\nuniform float u_offset;\n\nvoid main() {\n    vec4 p = vec4(position + normal * u_offset, 1.0);\n    gl_Position = projectionMatrix * modelViewMatrix * p;\n}"]),fragmentShader:p(["precision mediump float;\n#define GLSLIFY 1\n\nuniform vec3 u_color;\n\nvoid main() {\n    gl_FragColor = vec4(u_color, 1.0);\n}"]),uniforms:{u_offset:{type:"f",value:4.2},u_color:{type:"c",value:new THREE.Color(0)}}}),n.outlineMaterial.side=THREE.BackSide,n.thinOutlineMaterial=new THREE.ShaderMaterial({vertexShader:p(["precision mediump float;\n#define GLSLIFY 1\n\nuniform float u_offset;\n\nvoid main() {\n    vec4 p = vec4(position + normal * u_offset, 1.0);\n    gl_Position = projectionMatrix * modelViewMatrix * p;\n}"]),fragmentShader:p(["precision mediump float;\n#define GLSLIFY 1\n\nuniform vec3 u_color;\n\nvoid main() {\n    gl_FragColor = vec4(u_color, 1.0);\n}"]),uniforms:{u_offset:{type:"f",value:1},u_color:{type:"c",value:new THREE.Color(65280)}}}),n.thinOutlineMaterial.side=THREE.BackSide,n.shape=new THREE.Mesh(n.geometry,n.material),n.outline=new THREE.Mesh(n.geometry,n.outlineMaterial),n.thinOutline=new THREE.Mesh(n.geometry,n.thinOutlineMaterial),n.add(n.shape),n.add(n.outline),n.add(n.thinOutline),l["default"].on(h["default"].PALETTE_CHANGE,n.onPaletteChange),n}return a(t,e),s(t,[{key:"display",value:function(){TweenMax.to(this.scale,.6,{x:1,y:1,z:1,ease:Power2.easeOut})}},{key:"hide",value:function(){}},{key:"draw",value:function(){for(var e=d["default"].get(),t=e.m1,n=e.n11,o=e.n21,r=e.n31,i=e.m2,a=e.n12,s=e.n22,u=e.n32,l=.05,c=parseInt(2*Math.PI/l+1.3462),h=parseInt(Math.PI/l+1.5),f=0,p=0;c>p;p++)for(var m=-Math.PI+p*l,v=this.supershape(m,t,n,o,r,1,1),A=0;h>A;A++){var V=-Math.PI/2+A*l,y=this.supershape(V,i,a,s,u,1,1),g=v*Math.cos(m)*y*Math.cos(V)*this.radius,E=v*Math.sin(m)*y*Math.cos(V)*this.radius,b=y*Math.sin(V)*this.radius;this.geometry.vertices[f].set(g,E,b),f++}this.geometry.computeFaceNormals(),this.geometry.computeVertexNormals(),this.geometry.verticesNeedUpdate=!0}},{key:"onPaletteChange",value:function(e){this.material.uniforms.color1.value=new THREE.Color(e.shape[1]),this.material.uniforms.color2.value=new THREE.Color(e.shape[2]),this.material.uniforms.color3.value=new THREE.Color(e.shape[3]),this.material.uniforms.color4.value=new THREE.Color(e.shape[4]),this.outlineMaterial.uniforms.u_color.value=new THREE.Color(e.outline),this.thinOutlineMaterial.uniforms.u_color.value=new THREE.Color(e.thinOutline)}},{key:"supershape",value:function(e,t,n,o,r,i,a){var s=Math.abs(1/i*Math.cos(t*e/4));s=Math.pow(s,o);var u=Math.abs(1/a*Math.sin(t*e/4));u=Math.pow(u,r);var l=s+u,c=Math.pow(l,-1/n);return c}},{key:"update",value:function(){this.rotation.x+=.001,this.rotation.y+=.005,this.rotation.z+=.008,window.vjPlaying||this.draw()}}]),t}(THREE.Object3D);n["default"]=m},{"../controllers/ShapeController":54,"../events/Events":55,"../events/EventsManager":56,glslify:18}],50:[function(e,t,n){t.exports=[["#69D2E7","#A7DBD8","#E0E4CC","#F38630","#FA6900"],["#FE4365","#FC9D9A","#F9CDAD","#C8C8A9","#83AF9B"],["#EFEECC","#FE8B05","#FE0557","#400403","#0AABBA"],["#AAFF00","#FFAA00","#FF00AA","#AA00FF","#00AAFF"],["#ECD078","#D95B43","#C02942","#542437","#53777A"],["#E8DDCB","#CDB380","#036564","#033649","#031634"],["#490A3D","#BD1550","#E97F02","#F8CA00","#8A9B0F"],["#594F4F","#547980","#45ADA8","#9DE0AD","#E5FCC2"],["#00A0B0","#6A4A3C","#CC333F","#EB6841","#EDC951"],["#E94E77","#D68189","#C6A49A","#C6E5D9","#F4EAD5"],["#D9CEB2","#948C75","#D5DED9","#7A6A53","#99B2B7"],["#EFFFCD","#DCE9BE","#555152","#2E2633","#99173C"],["#3FB8AF","#7FC7AF","#DAD8A7","#FF9E9D","#FF3D7F"],["#413E4A","#73626E","#B38184","#F0B49E","#F7E4BE"],["#99B898","#FECEA8","#FF847C","#E84A5F","#2A363B"],["#FF4E50","#FC913A","#F9D423","#EDE574","#E1F5C4"],["#351330","#424254","#64908A","#E8CAA4","#CC2A41"],["#655643","#80BCA3","#F6F7BD","#E6AC27","#BF4D28"],["#FAD089","#FF9C5B","#F5634A","#ED303C","#3B8183"],["#FF9900","#424242","#E9E9E9","#BCBCBC","#3299BB"],["#EEE6AB","#C5BC8E","#696758","#45484B","#36393B"],["#F8B195","#F67280","#C06C84","#6C5B7B","#355C7D"],["#F04155","#FF823A","#F2F26F","#FFF7BD","#95CFB7"],["#F0D8A8","#3D1C00","#86B8B1","#F2D694","#FA2A00"],["#E8D5B7","#0E2430","#FC3A51","#F5B349","#E8D5B9"],["#AB526B","#BCA297","#C5CEAE","#F0E2A4","#F4EBC3"],["#607848","#789048","#C0D860","#F0F0D8","#604848"],["#1C2130","#028F76","#B3E099","#FFEAAD","#D14334"],["#A8E6CE","#DCEDC2","#FFD3B5","#FFAAA6","#FF8C94"],["#FC354C","#29221F","#13747D","#0ABFBC","#FCF7C5"],["#B9D3B0","#81BDA4","#B28774","#F88F79","#F6AA93"],["#230F2B","#F21D41","#EBEBBC","#BCE3C5","#82B3AE"],["#4E395D","#827085","#8EBE94","#CCFC8E","#DC5B3E"],["#DAD6CA","#1BB0CE","#4F8699","#6A5E72","#563444"],["#D1313D","#E5625C","#F9BF76","#8EB2C5","#615375"],["#8DCCAD","#988864","#FEA6A2","#F9D6AC","#FFE9AF"],["#CFFFDD","#B4DEC1","#5C5863","#A85163","#FF1F4C"],["#382F32","#FFEAF2","#FCD9E5","#FBC5D8","#F1396D"],["#B6D8C0","#C8D9BF","#DADABD","#ECDBBC","#FEDCBA"],["#A7C5BD","#E5DDCB","#EB7B59","#CF4647","#524656"],["#FFEDBF","#F7803C","#F54828","#2E0D23","#F8E4C1"],["#C1B398","#605951","#FBEEC2","#61A6AB","#ACCEC0"],["#FFFBB7","#A6F6AF","#66B6AB","#5B7C8D","#4F2958"],["#EFF3CD","#B2D5BA","#61ADA0","#248F8D","#605063"],["#FCFEF5","#E9FFE1","#CDCFB7","#D6E6C3","#FAFBE3"],["#0CA5B0","#4E3F30","#FEFEEB","#F8F4E4","#A5B3AA"],["#FFE181","#EEE9E5","#FAD3B2","#FFBA7F","#FF9C97"],["#A70267","#F10C49","#FB6B41","#F6D86B","#339194"],["#2D2D29","#215A6D","#3CA2A2","#92C7A3","#DFECE6"],["#F38A8A","#55443D","#A0CAB5","#CDE9CA","#F1EDD0"],["#F8EDD1","#D88A8A","#474843","#9D9D93","#C5CFC6"],["#1B325F","#9CC4E4","#E9F2F9","#3A89C9","#F26C4F"],["#BED6C7","#ADC0B4","#8A7E66","#A79B83","#BBB2A1"],["#82837E","#94B053","#BDEB07","#BFFA37","#E0E0E0"],["#312736","#D4838F","#D6ABB1","#D9D9D9","#C4FFEB"],["#E5EAA4","#A8C4A2","#69A5A4","#616382","#66245B"],["#395A4F","#432330","#853C43","#F25C5E","#FFA566"],["#FDFFD9","#FFF0B8","#FFD6A3","#FAAD8E","#142F30"],["#FBC599","#CDBB93","#9EAE8A","#335650","#F35F55"],["#C7FCD7","#D9D5A7","#D9AB91","#E6867A","#ED4A6A"],["#FFEFD3","#FFFEE4","#D0ECEA","#9FD6D2","#8B7A5E"],["#F1396D","#FD6081","#F3FFEB","#ACC95F","#8F9924"],["#F2E3C6","#FFC6A5","#E6324B","#2B2B2B","#353634"],["#59B390","#F0DDAA","#E47C5D","#E32D40","#152B3C"],["#512B52","#635274","#7BB0A8","#A7DBAB","#E4F5B1"],["#E65540","#F8ECC2","#65A8A6","#79896D","#FFFFFF"],["#CAFF42","#EBF7F8","#D0E0EB","#88ABC2","#49708A"],["#E4DED0","#ABCCBD","#7DBEB8","#181619","#E32F21"],["#058789","#503D2E","#D54B1A","#E3A72F","#F0ECC9"],["#EFD9B4","#D6A692","#A39081","#4D6160","#292522"],["#CC5D4C","#FFFEC6","#C7D1AF","#96B49C","#5B5847"],["#E0EFF1","#7DB4B5","#FFFFFF","#680148","#000000"],["#2D1B33","#F36A71","#EE887A","#E4E391","#9ABC8A"],["#360745","#D61C59","#E7D84B","#EFEAC5","#1B8798"],["#E3E8CD","#BCD8BF","#D3B9A3","#EE9C92","#FE857E"],["#FC284F","#FF824A","#FEA887","#F6E7F7","#D1D0D7"],["#FFB884","#F5DF98","#FFF8D4","#C0D1C2","#2E4347"],["#80A8A8","#909D9E","#A88C8C","#FF0D51","#7A8C89"],["#A1DBB2","#FEE5AD","#FACA66","#F7A541","#F45D4C"],["#641F5E","#676077","#65AC92","#C2C092","#EDD48E"],["#FFF3DB","#E7E4D5","#D3C8B4","#C84648","#703E3B"],["#D4F7DC","#DBE7B4","#DBC092","#E0846D","#F51441"],["#85847E","#AB6A6E","#F7345B","#353130","#CBCFB4"],["#E6B39A","#E6CBA5","#EDE3B4","#8B9E9B","#6D7578"],["#23192D","#FD0A54","#F57576","#FEBF97","#F5ECB7"],["#452E3C","#FF3D5A","#FFB969","#EAF27E","#3B8C88"],["#041122","#259073","#7FDA89","#C8E98E","#E6F99D"],["#B1E6D1","#77B1A9","#3D7B80","#270A33","#451A3E"],["#9D9E94","#C99E93","#F59D92","#E5B8AD","#D5D2C8"],["#FDCFBF","#FEB89F","#E23D75","#5F0D3B","#742365"],["#B7CBBF","#8C886F","#F9A799","#F4BFAD","#F5DABD"],["#F0FFC9","#A9DA88","#62997A","#72243D","#3B0819"],["#429398","#6B5D4D","#B0A18F","#DFCDB4","#FBEED3"],["#E6EBA9","#ABBB9F","#6F8B94","#706482","#703D6F"],["#44749D","#C6D4E1","#FFFFFF","#EBE7E0","#BDB8AD"],["#FA6A64","#7A4E48","#4A4031","#F6E2BB","#9EC6B8"],["#F6D76B","#FF9036","#D6254D","#FF5475","#FDEBA9"],["#E7EDEA","#FFC52C","#FB0C06","#030D4F","#CEECEF"],["#8D7966","#A8A39D","#D8C8B8","#E2DDD9","#F8F1E9"],["#F2E8C4","#98D9B6","#3EC9A7","#2B879E","#616668"],["#5CACC4","#8CD19D","#CEE879","#FCB653","#FF5254"]]},{}],51:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var o=[{background:1447446,outline:0,thinOutline:16726065,shape:[16726065,16703767,1482817,146789,1447446]},{background:11473753,outline:1447446,thinOutline:16715284,shape:[16756018,8720506,1447446,16777028,16756018]},{background:1184829,outline:1447446,thinOutline:9119684,shape:[16756018,16775616,1447446,1768134,859761]}];n["default"]=o},{}],52:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=e("../events/EventsManager"),s=o(a),u=e("../events/Events"),l=o(u),c=e("../util/Utils"),h=o(c),f=e("../colors/colorsPalette"),d=(o(f),function(){function e(){r(this,e),this.onKeypress=this.onKeypress.bind(this),this.paletteIndex=0,s["default"].on(l["default"].KEYPRESS,this.onKeypress)}return i(e,[{key:"onKeypress",value:function(e){switch(e){case"c":var t=h["default"].getPalette();s["default"].emit(l["default"].PALETTE_CHANGE,t)}}}],[{key:"start",value:function(){e.instance||(e.instance=new e)}}]),e}());n["default"]=d},{"../colors/colorsPalette":51,"../events/Events":55,"../events/EventsManager":56,"../util/Utils":61}],53:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=e("../events/EventsManager"),s=o(a),u=e("../events/Events"),l=o(u),c=function(){function e(){r(this,e),this.onKeypress=this.onKeypress.bind(this),this.keys={113:"q",119:"w",101:"e",114:"r",116:"t",121:"y",32:"spacebar",99:"c"},window.addEventListener("keypress",this.onKeypress)}return i(e,[{key:"onKeypress",value:function(e){s["default"].emit(l["default"].KEYPRESS,this.keys[e.keyCode])}}],[{key:"start",value:function(){e.instance||(e.instance=new e)}}]),e}();n["default"]=c},{"../events/Events":55,"../events/EventsManager":56}],54:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=e("../managers/RafManager"),s=o(a),u=e("../events/EventsManager"),l=(o(u),
e("../events/Events")),c=(o(l),e("../util/Simple1DNoise")),h=o(c),f=e("../util/Utils"),d=o(f),p=new h["default"],m=function(){function e(){r(this,e),this.m1=0,this.n11=0,this.n21=0,this.n31=0,this.m2=0,this.n12=0,this.n22=0,this.n32=0,this.smoothM1=0,this.smoothN11=0,this.smoothN21=0,this.smoothN31=0,this.smoothM2=0,this.smoothN12=0,this.smoothN22=0,this.smoothN32=0,this.movingTime=0,this.playing=!1,this.prevMouse=new THREE.Vector2,this.update=this.update.bind(this),this.onHideShape=this.onHideShape.bind(this),s["default"].bind("mouseController",this.update)}return i(e,[{key:"onHideShape",value:function(){this.playing=!1}},{key:"update",value:function(){window.mousedown&&(window.mouse.x===this.prevMouse.x&&window.mouse.y===this.prevMouse.y||(this.movingTime+=1),this.m1=d["default"].map(p.getVal(.02*this.movingTime),0,1,.1,15),this.n11=d["default"].map(p.getVal(.02*(this.movingTime+10)),0,1,.1,100),this.n21=d["default"].map(p.getVal(.02*(this.movingTime+20)),0,1,.1,100),this.n31=d["default"].map(p.getVal(.02*(this.movingTime+30)),0,1,.1,100),this.m2=d["default"].map(p.getVal(.02*(this.movingTime+40)),0,1,.1,15),this.n12=d["default"].map(p.getVal(.02*(this.movingTime+50)),0,1,.1,100),this.n22=d["default"].map(p.getVal(.02*(this.movingTime+60)),0,1,.1,100),this.n32=d["default"].map(p.getVal(.02*(this.movingTime+70)),0,1,.1,100)),this.smoothM1+=.8*(this.m1-this.smoothM1),this.smoothN11+=.8*(this.n11-this.smoothN11),this.smoothN21+=.8*(this.n21-this.smoothN21),this.smoothN31+=.8*(this.n31-this.smoothN31),this.smoothM2+=.8*(this.m2-this.smoothM2),this.smoothN12+=.8*(this.n12-this.smoothN12),this.smoothN22+=.8*(this.n22-this.smoothN22),this.smoothN32+=.8*(this.n32-this.smoothN32),this.prevMouse.set(window.mouse.x,window.mouse.y)}}],[{key:"start",value:function(){e.instance||(e.instance=new e)}},{key:"get",value:function(){var t={m1:e.instance.smoothM1.toFixed(2),n11:e.instance.smoothN11.toFixed(2),n21:e.instance.smoothN21.toFixed(2),n31:e.instance.smoothN31.toFixed(2),m2:e.instance.smoothM2.toFixed(2),n12:e.instance.smoothN12.toFixed(2),n22:e.instance.smoothN22.toFixed(2),n32:e.instance.smoothN32.toFixed(2)};return t}}]),e}();n["default"]=m},{"../events/Events":55,"../events/EventsManager":56,"../managers/RafManager":58,"../util/Simple1DNoise":60,"../util/Utils":61}],55:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var o={KEYPRESS:"custom_keypress",EFFECT_SPLIT:"effect_split",EFFECT_COLOR:"effect_color",PREPARE_VJING:"prepare_vjing",START_VJING:"start_vjing",DISPLAY_SHAPE:"display_shape",HIDE_SHAPE:"hide_shape",SOUND_ENDED:"sound_ended",DISPLAY_UI:"display_ui",MOUSE_DOWN:"mouse_down",MOUSE_UP:"mouse_up",PLAY_EFFECT:"play_effect",SPLIT_EFFECT:"split_effect",RESUME_VJING:"resume_vjing",PAUSE_VJING:"pause_vjing",PALETTE_CHANGE:"palette_change"};n["default"]=o},{}],56:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function(){function e(){o(this,e)}return r(e,null,[{key:"emit",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,o=e.eventsList[t];if(!o)return void console.warn("EventsManager :: Emit :: Currently no listeners for this event : ",t);for(var r=0,i=o.length;i>r;r++)o[r].fn(n)}},{key:"on",value:function(t,n){console.log("EventsManager :: ON ::",t),e.eventsList||(e.eventsList={}),e.eventsList[t]||(e.eventsList[t]=[]),e.eventsList[t].push({fn:n})}},{key:"once",value:function(t,n){var o=function r(o){e.off(t,r),n(o)};o._=n,e.on(t,o)}},{key:"off",value:function(t,n){var o=e.eventsList[t];if(!o)return void console.warn("EventsManager :: Off :: Currently no listeners for this event : ",t);if(!n)return void console.warn("EventsManager :: Off :: Callback is undefined");for(var r=[],i=0,a=o.length;a>i;i++){var s=o[i];s.fn!==n&&s.fn._!==n&&r.push(s)}r.length>0?e.eventsList[t]=r:delete e.eventsList[t]}}]),e}();n["default"]=i},{}],57:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=e("../events/EventsManager"),s=o(a),u=e("../events/Events"),l=o(u),c=(e("tap-event"),function(){function e(){r(this,e)}return i(e,null,[{key:"start",value:function(){window.mouse=new THREE.Vector2(.5*window.innerWidth,.5*window.innerHeight),window.mousedown=!1,window.addEventListener("mousemove",e.onMousemove),window.addEventListener("touchmove",e.onTouchmove),window.addEventListener("mousedown",e.onMousedown),window.addEventListener("touchstart",e.onMousedown),window.addEventListener("mouseup",e.onMouseup),window.addEventListener("touchend",e.onMouseup)}},{key:"onMousemove",value:function(e){window.mouse.set(e.clientX,e.clientY)}},{key:"onTouchmove",value:function(e){e.preventDefault(),window.mouse.set(e.touches[0].clientX,e.touches[0].clientY)}},{key:"onMousedown",value:function(){window.canStart&&(window.mousedown=!0,s["default"].emit(l["default"].MOUSE_DOWN))}},{key:"onMouseup",value:function(){window.canStart&&window.mousedown&&(window.mousedown=!1,s["default"].emit(l["default"].MOUSE_UP))}},{key:"onTap",value:function(){s["default"].emit(l["default"].MOUSE_DOWN),s["default"].emit(l["default"].MOUSE_UP)}}]),e}());n["default"]=c},{"../events/Events":55,"../events/EventsManager":56,"tap-event":30}],58:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function(){function e(){o(this,e),this.update=this.update.bind(this),this.binders=[],this.raf=null,this.now=Date.now(),this.time=this.now,this.deltaTime=0}return r(e,[{key:"update",value:function(){this.now=Date.now(),this.deltaTime=this.now-this.time,this.time=this.now;for(var e=0;e<this.binders.length;e++)this.binders[e].fn(this.deltaTime);this.raf=window.requestAnimationFrame(this.update)}}],[{key:"start",value:function(){e.INSTANCE||(e.INSTANCE=new e),e.INSTANCE.update()}},{key:"stop",value:function(){window.cancelAnimationFrame(e.INSTANCE.raf)}},{key:"bind",value:function(t,n){var o=e.INSTANCE;if("string"!=typeof t)return void console.error("RafManager :: Bind :: Invalid ID",t);if("function"!=typeof n)return void console.error("RafManager :: Bind :: Invalid Function",n);for(var r=0;r<o.binders.length;r++){var i=o.binders[r];if(i.id===t)return void console.warn("RafManager :: Bind :: ID already used !",t)}e.INSTANCE.binders.push({id:t,fn:n})}},{key:"unbind",value:function(t){for(var n=-1,o=e.INSTANCE,r=0;r<o.binders.length;r++)if(o.binders[r].id===t){n=r;break}n>-1&&o.binders.splice(n,1)}},{key:"debug",value:function(){console.table(e.INSTANCE.binders)}}]),e}();n["default"]=i},{}],59:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=e("../events/EventsManager"),s=o(a),u=e("../events/Events"),l=o(u),c=e("../managers/RafManager"),h=o(c),f=(e("web-audio-player"),e("web-audio-analyser")),d=e("analyser-frequency-average"),p=(e("detect-audio-autoplay"),e("ios-safe-audio-context")),m=p(),v=function(){function e(){r(this,e),this.ready=!1,this.tumtumTime=0,this.bumbumTime=0,this.onLoad=this.onLoad.bind(this),this.onEnded=this.onEnded.bind(this),this.onClick=this.onClick.bind(this),this.update=this.update.bind(this),this.onKeyPress=this.onKeyPress.bind(this),this.player=new Audio,this.player.crossOrigin="Anonymous",this.player.setAttribute("webkit-playsinline",""),this.player.addEventListener("canplay",this.onLoad),this.player.addEventListener("ended",this.onEnded),this.player.src=window.dev?"assets/sound/music.mp3":"public/assets/sound/music.mp3",s["default"].on(l["default"].KEYPRESS,this.onKeyPress),window.addEventListener("click",this.onClick)}return i(e,[{key:"onLoad",value:function(){this.ready||(this.ready=!0,this.audioUtil=f(this.player,m,{audible:!0,stereo:!1}),this.analyser=this.audioUtil.analyser,this.player.volume=0,e.pause())}},{key:"onEnded",value:function(){e.pause(),this.player.currentTime=0,s["default"].emit(l["default"].SOUND_ENDED)}},{key:"onClick",value:function(){}},{key:"onKeyPress",value:function(t){"spacebar"===t&&window.vjPlaying&&(this.player.paused?(e.play(),s["default"].emit(l["default"].RESUME_VJING)):(e.pause(),s["default"].emit(l["default"].PAUSE_VJING)))}},{key:"update",value:function(){if(!this.player.paused){var e=this.audioUtil.frequencies(),t=d(this.analyser,e,246,700),n=d(this.analyser,e,20,70),o=Date.now()-this.tumtumTime>600,r=Date.now()-this.bumbumTime>600,i=Math.abs(this.tumtumTime-this.bumbumTime);o&&t>.5?(this.tumtumTime=Date.now(),s["default"].emit(l["default"].PLAY_EFFECT,{disallow:!1})):r&&n>.95&&i>300&&(this.bumbumTime=Date.now(),s["default"].emit(l["default"].PLAY_EFFECT,{disallow:!0}))}}}],[{key:"start",value:function(){e.instance||(e.instance=new e)}},{key:"play",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:!0;t?(e.instance.player.play(),TweenMax.to(e.instance.player,.3,{volume:1,ease:Power2.easeOut,onComplete:function(){h["default"].bind("soundmanager",e.instance.update)}})):(e.instance.player.volume=1,e.instance.player.play(),TweenMax.delayedCall(.3,function(){h["default"].bind("soundmanager",e.instance.update)}))}},{key:"pause",value:function(){h["default"].unbind("soundmanager"),TweenMax.to(e.instance.player,.3,{volume:0,ease:Power2.easeOut,onComplete:function(){e.instance.player.pause()}})}}]),e}();n["default"]=v},{"../events/Events":55,"../events/EventsManager":56,"../managers/RafManager":58,"analyser-frequency-average":1,"detect-audio-autoplay":14,"ios-safe-audio-context":19,"web-audio-analyser":33,"web-audio-player":34}],60:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:256,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;o(this,e),this.MAX_VERTICES=t,this.MAX_VERTICES_MASK=this.MAX_VERTICES-1,this.amplitude=n,this.scale=r,this.xMin=0,this.xMax=0,this.r=[];for(var i=0;i<this.MAX_VERTICES;++i)this.r[i]=Math.random()}return r(e,[{key:"getVal",value:function(e){var t=e*this.scale,n=Math.floor(t),o=t-n,r=o*o*(3-2*o);return this.xMin=n&this.MAX_VERTICES_MASK,this.xMax=this.xMin+1&this.MAX_VERTICES_MASK,this.lerp(this.r[this.xMin],this.r[this.xMax],r)*this.amplitude}},{key:"lerp",value:function(e,t,n){return e*(1-n)+t*n}}]),e}();n["default"]=i},{}],61:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=e("../colors/colors2.json"),a=function(){function e(){o(this,e)}return r(e,null,[{key:"map",value:function(e,t,n,o,r){return(e-t)/(n-t)*(r-o)+o}},{key:"lucky",value:function(e){return!~~(Math.random()*e)}},{key:"range",value:function(e){return e[~~(Math.random()*e.length)]}},{key:"getPalette",value:function(){var e=i[~~(Math.random()*i.length)];return{background:e[0],outline:e[1],thinOutline:e[2],shape:e}}}]),e}();n["default"]=a},{"../colors/colors2.json":50}],62:[function(e,t,n){"use strict";function o(){function e(){o&&console.log(r.info.render),r.render(s,a)}function t(e,t){a.aspect=e/t,a.updateProjectionMatrix(),r.setSize(e,t),c.aspect=e/t,c.updateProjectionMatrix(),u.setSize(e,t)}var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=n.debug||!1,r=new THREE.WebGLRenderer({antialias:!0});r.setClearColor(15329769,1),r.setSize(window.innerWidth,window.innerHeight),r.shadowMap.enabled=!0,r.shadowMap.type=THREE.PCFSoftShadowMap;var i=r.domElement;document.body.appendChild(i);var a=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,1,2e3),s=new THREE.Scene,u=new THREE.CSS3DRenderer;u.setSize(window.innerWidth,window.innerHeight),u.domElement.style.position="absolute",u.domElement.style.top=0,document.body.appendChild(u.domElement);var l=new THREE.Scene,c=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,1,2e3);WAGNER.vertexShadersPath=window.dev?"js/vertex-shaders":"public/js/vertex-shaders",WAGNER.fragmentShadersPath=window.dev?"js/fragment-shaders":"public/js/fragment-shaders";var h=new WAGNER.Composer(r,{useRGBA:!0});h.setSize(i.width,i.height);var f={renderer:r,composer:h,canvas:i,camera:a,scene:s,css3DRenderer:u,css3DCamera:c,css3DScene:l,render:e,resize:t};return f}e("three-orbit-controls")(THREE);t.exports=o},{"three-orbit-controls":31}]},{},[45]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
