!function e(t,n,o){function r(a,s){if(!n[a]){if(!t[a]){var u="function"==typeof require&&require;if(!s&&u)return u(a,!0);if(i)return i(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var l=n[a]={exports:{}};t[a][0].call(l.exports,function(e){var n=t[a][1][e];return r(n?n:e)},l,l.exports,e,t,n,o)}return n[a].exports}for(var i="function"==typeof require&&require,a=0;a<o.length;a++)r(o[a]);return r}({1:[function(e,t,n){function o(e,t,n,o,i){for(var a=t.context.sampleRate,s=t.frequencyBinCount,u=r(o,a,s),c=r(i,a,s),l=c-u,f=0;c>u;u++)f+=n[u]/e;return 0===l?0:f/l}var r=e("audio-frequency-to-index");t.exports=o.bind(null,255),t.exports.floatData=o.bind(null,1)},{"audio-frequency-to-index":2}],2:[function(e,t,n){function o(e,t,n){var o=t/2,i=Math.round(e/o*n);return r(i,0,n)}var r=e("clamp");t.exports=o},{clamp:5}],3:[function(e,t,n){var o=e("./mime-types.json"),r={};Object.keys(o).forEach(function(e){var t=o[e];t.forEach(function(t){r[t]=e})}),t.exports=function(e){if(!e)throw new TypeError("must specify extension string");return 0===e.indexOf(".")&&(e=e.substring(1)),r[e.toLowerCase()]}},{"./mime-types.json":4}],4:[function(e,t,n){t.exports={"audio/midi":["mid","midi","kar","rmi"],"audio/mp4":["mp4a","m4a"],"audio/mpeg":["mpga","mp2","mp2a","mp3","m2a","m3a"],"audio/ogg":["oga","ogg","spx"],"audio/webm":["weba"],"audio/x-matroska":["mka"],"audio/x-mpegurl":["m3u"],"audio/wav":["wav"],"video/3gpp":["3gp"],"video/3gpp2":["3g2"],"video/mp4":["mp4","mp4v","mpg4"],"video/mpeg":["mpeg","mpg","mpe","m1v","m2v"],"video/ogg":["ogv"],"video/quicktime":["qt","mov"],"video/webm":["webm"],"video/x-f4v":["f4v"],"video/x-fli":["fli"],"video/x-flv":["flv"],"video/x-m4v":["m4v"],"video/x-matroska":["mkv","mk3d","mks"]}},{}],5:[function(e,t,n){function o(e,t,n){return n>t?t>e?t:e>n?n:e:n>e?n:e>t?t:e}t.exports=o},{}],6:[function(e,t,n){function o(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function r(e){return"function"==typeof e}function i(e){return"number"==typeof e}function a(e){return"object"==typeof e&&null!==e}function s(e){return void 0===e}t.exports=o,o.EventEmitter=o,o.prototype._events=void 0,o.prototype._maxListeners=void 0,o.defaultMaxListeners=10,o.prototype.setMaxListeners=function(e){if(!i(e)||0>e||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},o.prototype.emit=function(e){var t,n,o,i,u,c;if(this._events||(this._events={}),"error"===e&&(!this._events.error||a(this._events.error)&&!this._events.error.length)){if(t=arguments[1],t instanceof Error)throw t;var l=new Error('Uncaught, unspecified "error" event. ('+t+")");throw l.context=t,l}if(n=this._events[e],s(n))return!1;if(r(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:i=Array.prototype.slice.call(arguments,1),n.apply(this,i)}else if(a(n))for(i=Array.prototype.slice.call(arguments,1),c=n.slice(),o=c.length,u=0;o>u;u++)c[u].apply(this,i);return!0},o.prototype.addListener=function(e,t){var n;if(!r(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,r(t.listener)?t.listener:t),this._events[e]?a(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,a(this._events[e])&&!this._events[e].warned&&(n=s(this._maxListeners)?o.defaultMaxListeners:this._maxListeners,n&&n>0&&this._events[e].length>n&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace())),this},o.prototype.on=o.prototype.addListener,o.prototype.once=function(e,t){function n(){this.removeListener(e,n),o||(o=!0,t.apply(this,arguments))}if(!r(t))throw TypeError("listener must be a function");var o=!1;return n.listener=t,this.on(e,n),this},o.prototype.removeListener=function(e,t){var n,o,i,s;if(!r(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(n=this._events[e],i=n.length,o=-1,n===t||r(n.listener)&&n.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(a(n)){for(s=i;s-- >0;)if(n[s]===t||n[s].listener&&n[s].listener===t){o=s;break}if(0>o)return this;1===n.length?(n.length=0,delete this._events[e]):n.splice(o,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},o.prototype.removeAllListeners=function(e){var t,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(n=this._events[e],r(n))this.removeListener(e,n);else if(n)for(;n.length;)this.removeListener(e,n[n.length-1]);return delete this._events[e],this},o.prototype.listeners=function(e){var t;return t=this._events&&this._events[e]?r(this._events[e])?[this._events[e]]:this._events[e].slice():[]},o.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(r(t))return 1;if(t)return t.length}return 0},o.listenerCount=function(e,t){return e.listenerCount(t)}},{}],7:[function(e,t,n){function o(e,t,n){if(!s(t))throw new TypeError("iterator must be a function");arguments.length<3&&(n=this),"[object Array]"===u.call(e)?r(e,t,n):"string"==typeof e?i(e,t,n):a(e,t,n)}function r(e,t,n){for(var o=0,r=e.length;r>o;o++)c.call(e,o)&&t.call(n,e[o],o,e)}function i(e,t,n){for(var o=0,r=e.length;r>o;o++)t.call(n,e.charAt(o),o,e)}function a(e,t,n){for(var o in e)c.call(e,o)&&t.call(n,e[o],o,e)}var s=e("is-function");t.exports=o;var u=Object.prototype.toString,c=Object.prototype.hasOwnProperty},{"is-function":11}],8:[function(e,t,n){(function(e){var n;n="undefined"!=typeof window?window:"undefined"!=typeof e?e:"undefined"!=typeof self?self:{},t.exports=n}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],9:[function(e,t,n){t.exports=function(e){"string"==typeof e&&(e=[e]);for(var t=[].slice.call(arguments,1),n=[],o=0;o<e.length-1;o++)n.push(e[o],t[o]||"");return n.push(e[o]),n.join("")}},{}],10:[function(e,t,n){function o(e){return e&&"object"==typeof e?"object"==typeof window&&"object"==typeof window.Node?e instanceof window.Node:"number"==typeof e.nodeType&&"string"==typeof e.nodeName:!1}t.exports=o},{}],11:[function(e,t,n){function o(e){var t=r.call(e);return"[object Function]"===t||"function"==typeof e&&"[object RegExp]"!==t||"undefined"!=typeof window&&(e===window.setTimeout||e===window.alert||e===window.confirm||e===window.prompt)}t.exports=o;var r=Object.prototype.toString},{}],12:[function(e,t,n){"use strict";function o(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}function r(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;10>n;n++)t["_"+String.fromCharCode(n)]=n;var o=Object.getOwnPropertyNames(t).map(function(e){return t[e]});if("0123456789"!==o.join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(i){return!1}}var i=Object.getOwnPropertySymbols,a=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;t.exports=r()?Object.assign:function(e,t){for(var n,r,u=o(e),c=1;c<arguments.length;c++){n=Object(arguments[c]);for(var l in n)a.call(n,l)&&(u[l]=n[l]);if(i){r=i(n);for(var f=0;f<r.length;f++)s.call(n,r[f])&&(u[r[f]]=n[r[f]])}}return u}},{}],13:[function(e,t,n){var o=e("trim"),r=e("for-each"),i=function(e){return"[object Array]"===Object.prototype.toString.call(e)};t.exports=function(e){if(!e)return{};var t={};return r(o(e).split("\n"),function(e){var n=e.indexOf(":"),r=o(e.slice(0,n)).toLowerCase(),a=o(e.slice(n+1));"undefined"==typeof t[r]?t[r]=a:i(t[r])?t[r].push(a):t[r]=[t[r],a]}),t}},{"for-each":7,trim:18}],14:[function(e,t,n){function o(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function i(e){if(f===setTimeout)return setTimeout(e,0);if((f===o||!f)&&setTimeout)return f=setTimeout,setTimeout(e,0);try{return f(e,0)}catch(t){try{return f.call(null,e,0)}catch(t){return f.call(this,e,0)}}}function a(e){if(d===clearTimeout)return clearTimeout(e);if((d===r||!d)&&clearTimeout)return d=clearTimeout,clearTimeout(e);try{return d(e)}catch(t){try{return d.call(null,e)}catch(t){return d.call(this,e)}}}function s(){v&&p&&(v=!1,p.length?m=p.concat(m):E=-1,m.length&&u())}function u(){if(!v){var e=i(s);v=!0;for(var t=m.length;t;){for(p=m,m=[];++E<t;)p&&p[E].run();E=-1,t=m.length}p=null,v=!1,a(e)}}function c(e,t){this.fun=e,this.array=t}function l(){}var f,d,h=t.exports={};!function(){try{f="function"==typeof setTimeout?setTimeout:o}catch(e){f=o}try{d="function"==typeof clearTimeout?clearTimeout:r}catch(e){d=r}}();var p,m=[],v=!1,E=-1;h.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];m.push(new c(e,t)),1!==m.length||v||i(u)},c.prototype.run=function(){this.fun.apply(null,this.array)},h.title="browser",h.browser=!0,h.env={},h.argv=[],h.version="",h.versions={},h.on=l,h.addListener=l,h.once=l,h.off=l,h.removeListener=l,h.removeAllListeners=l,h.emit=l,h.binding=function(e){throw new Error("process.binding is not supported")},h.cwd=function(){return"/"},h.chdir=function(e){throw new Error("process.chdir is not supported")},h.umask=function(){return 0}},{}],15:[function(e,t,n){(function(e){t.exports=e.performance&&e.performance.now?function(){return performance.now()}:Date.now||function(){return+new Date}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],16:[function(e,t,n){function o(e,t,n){n=n||{},Array.isArray(t)||(t=[t]);var o=n.element||document.createElement(e);return n.loop&&o.setAttribute("loop","loop"),n.muted&&o.setAttribute("muted","muted"),n.autoplay&&o.setAttribute("autoplay","autoplay"),n.controls&&o.setAttribute("controls","controls"),n.crossOrigin&&o.setAttribute("crossorigin",n.crossOrigin),n.preload&&o.setAttribute("preload",n.preload),n.poster&&o.setAttribute("poster",n.poster),"undefined"!=typeof n.volume&&o.setAttribute("volume",n.volume),t=t.filter(Boolean),t.forEach(function(e){o.appendChild(r(e))}),o}function r(e){if(a(e))return e;if("string"==typeof e&&(e={src:e},e.src)){var t=i(e.src);t&&(e.type=s(t))}var n=document.createElement("source");return e.src&&n.setAttribute("src",e.src),e.type&&n.setAttribute("type",e.type),n}function i(e){var t=e.lastIndexOf(".");return 0>=t||t===e.length-1?null:e.substring(t+1)}var a=e("is-dom"),s=e("browser-media-mime-type");t.exports.video=o.bind(null,"video"),t.exports.audio=o.bind(null,"audio")},{"browser-media-mime-type":3,"is-dom":10}],17:[function(e,t,n){t.exports=function(e){function t(t,n){function o(){return 2*Math.PI/60/60*S.autoRotateSpeed}function r(){return Math.pow(.95,S.zoomSpeed)}function i(e){V.theta-=e}function a(e){V.phi-=e}function s(t){S.object instanceof e.PerspectiveCamera?X/=t:S.object instanceof e.OrthographicCamera?(S.object.zoom=Math.max(S.minZoom,Math.min(S.maxZoom,S.object.zoom*t)),S.object.updateProjectionMatrix(),Y=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),S.enableZoom=!1)}function u(t){S.object instanceof e.PerspectiveCamera?X*=t:S.object instanceof e.OrthographicCamera?(S.object.zoom=Math.max(S.minZoom,Math.min(S.maxZoom,S.object.zoom/t)),S.object.updateProjectionMatrix(),Y=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),S.enableZoom=!1)}function c(e){z.set(e.clientX,e.clientY)}function l(e){J.set(e.clientX,e.clientY)}function f(e){$.set(e.clientX,e.clientY)}function d(e){G.set(e.clientX,e.clientY),K.subVectors(G,z);var t=S.domElement===document?S.domElement.body:S.domElement;i(2*Math.PI*K.x/t.clientWidth*S.rotateSpeed),a(2*Math.PI*K.y/t.clientHeight*S.rotateSpeed),z.copy(G),S.update()}function h(e){Q.set(e.clientX,e.clientY),ee.subVectors(Q,J),ee.y>0?s(r()):ee.y<0&&u(r()),J.copy(Q),S.update()}function p(e){W.set(e.clientX,e.clientY),Z.subVectors(W,$),oe(Z.x,Z.y),$.copy(W),S.update()}function m(e){}function v(e){e.deltaY<0?u(r()):e.deltaY>0&&s(r()),S.update()}function E(e){switch(e.keyCode){case S.keys.UP:oe(0,S.keyPanSpeed),S.update();break;case S.keys.BOTTOM:oe(0,-S.keyPanSpeed),S.update();break;case S.keys.LEFT:oe(S.keyPanSpeed,0),S.update();break;case S.keys.RIGHT:oe(-S.keyPanSpeed,0),S.update()}}function y(e){z.set(e.touches[0].pageX,e.touches[0].pageY)}function w(e){var t=e.touches[0].pageX-e.touches[1].pageX,n=e.touches[0].pageY-e.touches[1].pageY,o=Math.sqrt(t*t+n*n);J.set(0,o)}function b(e){$.set(e.touches[0].pageX,e.touches[0].pageY)}function g(e){G.set(e.touches[0].pageX,e.touches[0].pageY),K.subVectors(G,z);var t=S.domElement===document?S.domElement.body:S.domElement;i(2*Math.PI*K.x/t.clientWidth*S.rotateSpeed),a(2*Math.PI*K.y/t.clientHeight*S.rotateSpeed),z.copy(G),S.update()}function F(e){var t=e.touches[0].pageX-e.touches[1].pageX,n=e.touches[0].pageY-e.touches[1].pageY,o=Math.sqrt(t*t+n*n);Q.set(0,o),ee.subVectors(Q,J),ee.y>0?u(r()):ee.y<0&&s(r()),J.copy(Q),S.update()}function C(e){W.set(e.touches[0].pageX,e.touches[0].pageY),Z.subVectors(W,$),oe(Z.x,Z.y),$.copy(W),S.update()}function A(e){}function D(e){if(S.enabled!==!1){if(e.preventDefault(),e.button===S.mouseButtons.ORBIT){if(S.enableRotate===!1)return;c(e),H=N.ROTATE}else if(e.button===S.mouseButtons.ZOOM){if(S.enableZoom===!1)return;l(e),H=N.DOLLY}else if(e.button===S.mouseButtons.PAN){if(S.enablePan===!1)return;f(e),H=N.PAN}H!==N.NONE&&(document.addEventListener("mousemove",M,!1),document.addEventListener("mouseup",T,!1),S.dispatchEvent(k))}}function M(e){if(S.enabled!==!1)if(e.preventDefault(),H===N.ROTATE){if(S.enableRotate===!1)return;d(e)}else if(H===N.DOLLY){if(S.enableZoom===!1)return;h(e)}else if(H===N.PAN){if(S.enablePan===!1)return;p(e)}}function T(e){S.enabled!==!1&&(m(e),document.removeEventListener("mousemove",M,!1),document.removeEventListener("mouseup",T,!1),S.dispatchEvent(L),H=N.NONE)}function _(e){S.enabled===!1||S.enableZoom===!1||H!==N.NONE&&H!==N.ROTATE||(e.preventDefault(),e.stopPropagation(),v(e),S.dispatchEvent(k),S.dispatchEvent(L))}function B(e){S.enabled!==!1&&S.enableKeys!==!1&&S.enablePan!==!1&&E(e)}function P(e){if(S.enabled!==!1){switch(e.touches.length){case 1:if(S.enableRotate===!1)return;y(e),H=N.TOUCH_ROTATE;break;case 2:if(S.enableZoom===!1)return;w(e),H=N.TOUCH_DOLLY;break;case 3:if(S.enablePan===!1)return;b(e),H=N.TOUCH_PAN;break;default:H=N.NONE}H!==N.NONE&&S.dispatchEvent(k)}}function x(e){if(S.enabled!==!1)switch(e.preventDefault(),e.stopPropagation(),e.touches.length){case 1:if(S.enableRotate===!1)return;if(H!==N.TOUCH_ROTATE)return;g(e);break;case 2:if(S.enableZoom===!1)return;if(H!==N.TOUCH_DOLLY)return;F(e);break;case 3:if(S.enablePan===!1)return;if(H!==N.TOUCH_PAN)return;C(e);break;default:H=N.NONE}}function O(e){S.enabled!==!1&&(A(e),S.dispatchEvent(L),H=N.NONE)}function R(e){e.preventDefault()}this.object=t,this.domElement=void 0!==n?n:document,this.enabled=!0,this.target=new e.Vector3,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-(1/0),this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.25,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.enableKeys=!0,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40},this.mouseButtons={ORBIT:e.MOUSE.LEFT,ZOOM:e.MOUSE.MIDDLE,PAN:e.MOUSE.RIGHT},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this.getPolarAngle=function(){return I.phi},this.getAzimuthalAngle=function(){return I.theta},this.reset=function(){S.target.copy(S.target0),S.object.position.copy(S.position0),S.object.zoom=S.zoom0,S.object.updateProjectionMatrix(),S.dispatchEvent(j),S.update(),H=N.NONE},this.update=function(){var n=new e.Vector3,r=(new e.Quaternion).setFromUnitVectors(t.up,new e.Vector3(0,1,0)),a=r.clone().inverse(),s=new e.Vector3,u=new e.Quaternion;return function(){var e=S.object.position;return n.copy(e).sub(S.target),n.applyQuaternion(r),I.setFromVector3(n),S.autoRotate&&H===N.NONE&&i(o()),I.theta+=V.theta,I.phi+=V.phi,I.theta=Math.max(S.minAzimuthAngle,Math.min(S.maxAzimuthAngle,I.theta)),I.phi=Math.max(S.minPolarAngle,Math.min(S.maxPolarAngle,I.phi)),I.makeSafe(),I.radius*=X,I.radius=Math.max(S.minDistance,Math.min(S.maxDistance,I.radius)),S.target.add(q),n.setFromSpherical(I),n.applyQuaternion(a),e.copy(S.target).add(n),S.object.lookAt(S.target),S.enableDamping===!0?(V.theta*=1-S.dampingFactor,V.phi*=1-S.dampingFactor):V.set(0,0,0),X=1,q.set(0,0,0),Y||s.distanceToSquared(S.object.position)>U||8*(1-u.dot(S.object.quaternion))>U?(S.dispatchEvent(j),s.copy(S.object.position),u.copy(S.object.quaternion),Y=!1,!0):!1}}(),this.dispose=function(){S.domElement.removeEventListener("contextmenu",R,!1),S.domElement.removeEventListener("mousedown",D,!1),S.domElement.removeEventListener("wheel",_,!1),S.domElement.removeEventListener("touchstart",P,!1),S.domElement.removeEventListener("touchend",O,!1),S.domElement.removeEventListener("touchmove",x,!1),document.removeEventListener("mousemove",M,!1),document.removeEventListener("mouseup",T,!1),window.removeEventListener("keydown",B,!1)};var S=this,j={type:"change"},k={type:"start"},L={type:"end"},N={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_DOLLY:4,TOUCH_PAN:5},H=N.NONE,U=1e-6,I=new e.Spherical,V=new e.Spherical,X=1,q=new e.Vector3,Y=!1,z=new e.Vector2,G=new e.Vector2,K=new e.Vector2,$=new e.Vector2,W=new e.Vector2,Z=new e.Vector2,J=new e.Vector2,Q=new e.Vector2,ee=new e.Vector2,te=function(){var t=new e.Vector3;return function(e,n){t.setFromMatrixColumn(n,0),t.multiplyScalar(-e),q.add(t)}}(),ne=function(){var t=new e.Vector3;return function(e,n){t.setFromMatrixColumn(n,1),t.multiplyScalar(e),q.add(t)}}(),oe=function(){var t=new e.Vector3;return function(n,o){var r=S.domElement===document?S.domElement.body:S.domElement;if(S.object instanceof e.PerspectiveCamera){var i=S.object.position;t.copy(i).sub(S.target);var a=t.length();a*=Math.tan(S.object.fov/2*Math.PI/180),te(2*n*a/r.clientHeight,S.object.matrix),ne(2*o*a/r.clientHeight,S.object.matrix)}else S.object instanceof e.OrthographicCamera?(te(n*(S.object.right-S.object.left)/S.object.zoom/r.clientWidth,S.object.matrix),ne(o*(S.object.top-S.object.bottom)/S.object.zoom/r.clientHeight,S.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),S.enablePan=!1)}}();S.domElement.addEventListener("contextmenu",R,!1),S.domElement.addEventListener("mousedown",D,!1),S.domElement.addEventListener("wheel",_,!1),S.domElement.addEventListener("touchstart",P,!1),S.domElement.addEventListener("touchend",O,!1),S.domElement.addEventListener("touchmove",x,!1),window.addEventListener("keydown",B,!1),this.update()}return t.prototype=Object.create(e.EventDispatcher.prototype),t.prototype.constructor=t,Object.defineProperties(t.prototype,{center:{get:function(){return console.warn("THREE.OrbitControls: .center has been renamed to .target"),this.target}},noZoom:{get:function(){return console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),!this.enableZoom},set:function(e){console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),this.enableZoom=!e}},noRotate:{get:function(){return console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),!this.enableRotate},set:function(e){console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),this.enableRotate=!e}},noPan:{get:function(){return console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),!this.enablePan},set:function(e){console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),this.enablePan=!e}},noKeys:{get:function(){return console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),!this.enableKeys},set:function(e){console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),this.enableKeys=!e}},staticMoving:{get:function(){return console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),!this.enableDamping},set:function(e){console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),this.enableDamping=!e}},dynamicDampingFactor:{get:function(){return console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.dampingFactor},set:function(e){console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.dampingFactor=e}}}),t}},{}],18:[function(e,t,n){function o(e){return e.replace(/^\s*|\s*$/g,"")}n=t.exports=o,n.left=function(e){return e.replace(/^\s*/,"")},n.right=function(e){return e.replace(/\s*$/,"")}},{}],19:[function(e,t,n){function o(e,t,n){if(!(this instanceof o))return new o(e,t,n);if(t instanceof r||(n=t,t=null),n=n||{},this.ctx=t=t||new r,e instanceof AudioNode||(e=e instanceof Audio||e instanceof HTMLAudioElement?t.createMediaElementSource(e):t.createMediaStreamSource(e)),this.analyser=t.createAnalyser(),this.stereo=!!n.stereo,this.audible=n.audible!==!1,this.wavedata=null,this.freqdata=null,this.splitter=null,this.merger=null,this.source=e,this.stereo){this.analyser=[this.analyser],this.analyser.push(t.createAnalyser()),this.splitter=t.createChannelSplitter(2),this.merger=t.createChannelMerger(2),this.output=this.merger,this.source.connect(this.splitter);for(var i=0;2>i;i++)this.splitter.connect(this.analyser[i],i,0),this.analyser[i].connect(this.merger,0,i);this.audible&&this.merger.connect(t.destination)}else this.output=this.source,this.source.connect(this.analyser),this.audible&&this.analyser.connect(t.destination)}var r=window.AudioContext||window.webkitAudioContext;t.exports=o,o.prototype.waveform=function(e,t){e||(e=this.wavedata||(this.wavedata=new Uint8Array((this.analyser[0]||this.analyser).frequencyBinCount)));var n=this.stereo?this.analyser[t||0]:this.analyser;return n.getByteTimeDomainData(e),e},o.prototype.frequencies=function(e,t){e||(e=this.freqdata||(this.freqdata=new Uint8Array((this.analyser[0]||this.analyser).frequencyBinCount)));var n=this.stereo?this.analyser[t||0]:this.analyser;return n.getByteFrequencyData(e),e}},{}],20:[function(e,t,n){function o(e,t){if(!e)throw new TypeError("must specify a src parameter");return t=t||{},t.buffer?r(e,t):i(e,t)}var r=e("./lib/buffer-source"),i=e("./lib/media-source");t.exports=o},{"./lib/buffer-source":22,"./lib/media-source":25}],21:[function(e,t,n){function o(){var e=window.AudioContext||window.webkitAudioContext;return new e}t.exports=o},{}],22:[function(e,t,n){(function(n){function o(e,t){function o(e){a(v,e,function(e,t){return e?m.emit("error",e):(h=t,d&&(d.buffer=h),p=h.duration,E.buffer=h,void m.emit("load"))},function(e,t){m.emit("progress",e,t)},function(){m.emit("decoding")})}function l(){m.emit("end"),g=!1,b=0}function f(){d&&d.disconnect()}t=t||{};var d,h,p,m=new s,v=t.context||i(),E=v.createGain(),y=null,w=null,b=0,g=!1,F=t.loop;m.play=function(){if(!g){g=!0,t.autoResume!==!1&&c(m.context),f(),d=v.createBufferSource(),d.connect(m.node),d.onended=l,h&&(d.buffer=h),F&&(d.loop=!0,"number"==typeof t.loopStart&&(d.loopStart=t.loopStart),"number"==typeof t.loopEnd&&(d.loopEnd=t.loopEnd)),p&&b>p&&(b%=p);var e=b;d.start(0,e),y=u()}},m.pause=function(){g&&(g=!1,d.onended=null,d.stop(0),w=u(),b+=(w-y)/1e3)},m.stop=function(){m.pause(),l()},m.dispose=function(){f(),h=null},m.node=E,m.context=v,Object.defineProperties(m,{duration:{enumerable:!0,configurable:!0,get:function(){return p}},playing:{enumerable:!0,configurable:!0,get:function(){return g}},buffer:{enumerable:!0,configurable:!0,get:function(){return h}},volume:{enumerable:!0,configurable:!0,get:function(){return E.gain.value},set:function(e){E.gain.value=e}}}),"number"==typeof t.volume&&(m.volume=t.volume);var C=Array.isArray(e)?e:[e];C=C.filter(Boolean);var A=C.some(r);if(A){var D=C.filter(r)[0];"function"==typeof D.getAttribute?D=D.getAttribute("src"):"string"==typeof D.src&&(D=D.src),o(D)}else n.nextTick(function(){m.emit("error",r.createError(C))});return m}var r=e("./can-play-src"),i=e("./audio-context"),a=e("./xhr-audio"),s=e("events").EventEmitter,u=e("right-now"),c=e("./resume-context");t.exports=o}).call(this,e("_process"))},{"./audio-context":21,"./can-play-src":23,"./resume-context":26,"./xhr-audio":27,_process:14,events:6,"right-now":15}],23:[function(e,t,n){function o(e){if(!e)throw new TypeError("src cannot be empty");var t;if("function"==typeof e.getAttribute)t=e.getAttribute("type");else if("string"==typeof e){var n=i(e);n&&(t=s(n))}else t=e.type;if(!t)return!0;a||(a=new window.Audio);var o=a.canPlayType(t).replace(/no/,"");return Boolean(o)}function r(e){var t=new Error("This browser does not support any of the following sources:\n    "+e.join(", ")+"\nTry using an array of OGG, MP3 and WAV.");return t.type="AUDIO_FORMAT",t}function i(e){var t=e.lastIndexOf(".");if(!(0>=t||t===e.length-1))return e.substring(t+1)}var a,s=e("browser-media-mime-type");t.exports=o,t.exports.createError=r},{"browser-media-mime-type":3}],24:[function(e,t,n){function o(e,t,n){function o(r){e.removeEventListener(t,o,!1),n(r,e)}e.addEventListener(t,o,!1)}t.exports=o},{}],25:[function(e,t,n){(function(n){function o(e,t){function o(){var e=Array.prototype.slice.call(h.children),t=e.length,o=!1,r=function(n,i){o||(t--,console.warn("Error loading source: "+i.getAttribute("src")),0>=t&&(o=!0,e.forEach(function(e){e.removeEventListener("error",r,!1)}),f.emit("error",new Error("Could not play any of the supplied sources"))))},i=function(){f.emit("load")};h.readyState>=h.HAVE_ENOUGH_DATA?n.nextTick(i):(l(h,"canplay",i),l(h,"error",function(e){f.emit(new Error("Unknown error while loading <audio>"))}),e.forEach(function(e){l(e,"error",r)})),h.load()}t=a({},t);var f=new r;t.element||(t.element=new window.Audio);var d=t.volume;delete t.volume;var h=i(e,t),p=t.context||u(),m=p.createGain(),v=p.createMediaElementSource(h);v.connect(m),h.addEventListener("ended",function(){f.emit("end")}),h.addEventListener("play",function(){console.log("PLAY")});var E=t.loopStart,y=t.loopEnd,w="number"==typeof E&&isFinite(E),b="number"==typeof y&&isFinite(y),g=!1;(w||b)&&window.requestAnimationFrame(function A(){if("number"==typeof h.duration){var e=h.currentTime,t=b?Math.min(h.duration,y):h.duration;e>(E||0)&&(g=!0),w&&g&&E>e&&(h.currentTime=E),e>=t&&b&&(h.currentTime=w?E:0),window.requestAnimationFrame(A)}}),f.element=h,f.context=p,f.node=m,f.pause=h.pause.bind(h),f.play=function(){return t.autoResume!==!1&&s(f.context),h.play()},f.dispose=function(){},f.stop=function(){var e=f.playing;h.pause(),h.currentTime=0,g=!1,e&&f.emit("end")},Object.defineProperties(f,{duration:{enumerable:!0,configurable:!0,get:function(){return h.duration}},currentTime:{enumerable:!0,configurable:!0,get:function(){return h.currentTime}},playing:{enumerable:!0,configurable:!0,get:function(){return!h.paused}},volume:{enumerable:!0,configurable:!0,get:function(){return m.gain.value},set:function(e){m.gain.value=e}}}),"number"==typeof d&&(f.volume=d);var F=Array.isArray(e)?e:[e];F=F.filter(Boolean);var C=F.some(c);return C?o():n.nextTick(function(){f.emit("error",c.createError(F))}),f}var r=e("events").EventEmitter,i=e("simple-media-element").audio,a=e("object-assign"),s=e("./resume-context"),u=e("./audio-context"),c=e("./can-play-src"),l=e("./event-add-once");t.exports=o}).call(this,e("_process"))},{"./audio-context":21,"./can-play-src":23,"./event-add-once":24,"./resume-context":26,_process:14,events:6,"object-assign":12,"simple-media-element":16}],26:[function(e,t,n){t.exports=function(e){"suspended"===e.state&&"function"==typeof e.resume&&e.resume()}},{}],27:[function(e,t,n){function o(e,t,n,o,a){function s(t){a(),e.decodeAudioData(t,function(e){n(null,e)},function(){var e=new Error("Error decoding audio data");e.type="DECODE_AUDIO_DATA",n(e)})}var u=r({uri:t,responseType:"arraybuffer"},function(e,o,r){return/^2/.test(o.statusCode)||(e=new Error("status code "+o.statusCode+" requesting "+t)),e?n(e):void s(r)});i(u).on("data",function(e,t){o(e,t)})}var r=e("xhr"),i=e("xhr-progress");t.exports=o},{xhr:29,"xhr-progress":28}],28:[function(e,t,n){function o(e){function t(e){var t=e.lengthComputable?e.loaded/e.total:0;i||o.emit("data",t,e.total||null),i=1===t}function n(r){("load"===r.type||/^(ready|complete)$/g.test((r.currentTarget||r.srcElement).readyState))&&(i||(e.removeEventListener?(e.removeEventListener("load",n,!1),e.removeEventListener("progress",t,!1)):e.detatchEvent&&e.detatchEvent("onreadystatechange",n),o.emit("data",1,r.total||null),o.emit("done"),i=!0))}var o=new r,i=!1;return e.attachEvent?(e.attachEvent("onreadystatechange",n),o):(e.addEventListener("load",n,!1),e.addEventListener("progress",t,!1),o)}var r=e("events").EventEmitter;t.exports=o},{events:6}],29:[function(e,t,n){"use strict";function o(e,t){for(var n=0;n<e.length;n++)t(e[n])}function r(e){for(var t in e)if(e.hasOwnProperty(t))return!1;return!0}function i(e,t,n){var o=e;return f(t)?(n=t,"string"==typeof e&&(o={uri:e})):o=h(t,{uri:e}),o.callback=n,o}function a(e,t,n){return t=i(e,t,n),s(t)}function s(e){function t(){4===l.readyState&&setTimeout(i,0)}function n(){var e=void 0;if(e=l.response?l.response:l.responseText||u(l),b)try{e=JSON.parse(e)}catch(t){}return e}function o(e){return clearTimeout(p),e instanceof Error||(e=new Error(""+(e||"Unknown XMLHttpRequest Error"))),e.statusCode=0,c(e,g)}function i(){if(!h){var t;clearTimeout(p),t=e.useXDR&&void 0===l.status?200:1223===l.status?204:l.status;var o=g,r=null;return 0!==t?(o={body:n(),statusCode:t,method:v,headers:{},url:m,rawRequest:l},l.getAllResponseHeaders&&(o.headers=d(l.getAllResponseHeaders()))):r=new Error("Internal XMLHttpRequest Error"),c(r,o,o.body)}}if("undefined"==typeof e.callback)throw new Error("callback argument missing");var s=!1,c=function(t,n,o){s||(s=!0,e.callback(t,n,o))},l=e.xhr||null;l||(l=e.cors||e.useXDR?new a.XDomainRequest:new a.XMLHttpRequest);var f,h,p,m=l.url=e.uri||e.url,v=l.method=e.method||"GET",E=e.body||e.data,y=l.headers=e.headers||{},w=!!e.sync,b=!1,g={body:void 0,headers:{},statusCode:0,method:v,url:m,rawRequest:l};if("json"in e&&e.json!==!1&&(b=!0,y.accept||y.Accept||(y.Accept="application/json"),"GET"!==v&&"HEAD"!==v&&(y["content-type"]||y["Content-Type"]||(y["Content-Type"]="application/json"),E=JSON.stringify(e.json===!0?E:e.json))),l.onreadystatechange=t,l.onload=i,l.onerror=o,l.onprogress=function(){},l.onabort=function(){h=!0},l.ontimeout=o,l.open(v,m,!w,e.username,e.password),w||(l.withCredentials=!!e.withCredentials),!w&&e.timeout>0&&(p=setTimeout(function(){if(!h){h=!0,l.abort("timeout");var e=new Error("XMLHttpRequest timeout");e.code="ETIMEDOUT",o(e)}},e.timeout)),l.setRequestHeader)for(f in y)y.hasOwnProperty(f)&&l.setRequestHeader(f,y[f]);else if(e.headers&&!r(e.headers))throw new Error("Headers cannot be set on an XDomainRequest object");return"responseType"in e&&(l.responseType=e.responseType),"beforeSend"in e&&"function"==typeof e.beforeSend&&e.beforeSend(l),l.send(E||null),l}function u(e){
if("document"===e.responseType)return e.responseXML;var t=e.responseXML&&"parsererror"===e.responseXML.documentElement.nodeName;return""!==e.responseType||t?null:e.responseXML}function c(){}var l=e("global/window"),f=e("is-function"),d=e("parse-headers"),h=e("xtend");t.exports=a,a.XMLHttpRequest=l.XMLHttpRequest||c,a.XDomainRequest="withCredentials"in new a.XMLHttpRequest?a.XMLHttpRequest:l.XDomainRequest,o(["get","put","post","patch","head","delete"],function(e){a["delete"===e?"del":e]=function(t,n,o){return n=i(t,n,o),n.method=e.toUpperCase(),s(n)}})},{"global/window":8,"is-function":11,"parse-headers":13,xtend:30}],30:[function(e,t,n){function o(){for(var e={},t=0;t<arguments.length;t++){var n=arguments[t];for(var o in n)r.call(n,o)&&(e[o]=n[o])}return e}t.exports=o;var r=Object.prototype.hasOwnProperty},{}],31:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=e("./util/Utils"),s=o(a),u=e("./events/EventsManager"),c=o(u),l=e("./events/Events"),f=o(l),d=e("./managers/RafManager"),h=o(d),p=e("./managers/InteractionManager"),m=o(p),v=e("./managers/SoundManager"),E=o(v),y=e("./controllers/KeyboardController"),w=o(y),b=e("./controllers/EffectController"),g=o(b),F=e("./controllers/ShapeController"),C=o(F),A=e("./app/Supershape"),D=o(A),M=e("./app/Background"),T=o(M),_=e("./app/Circles"),B=o(_),P=e("./util/createApp"),x=e("glslify"),O=function(){function e(){r(this,e),window.vjPlaying=!1,this.render=this.render.bind(this),this.onMouseDown=this.onMouseDown.bind(this),this.onMouseUp=this.onMouseUp.bind(this),this.onPlayEffect=this.onPlayEffect.bind(this),this.onSplitEffect=this.onSplitEffect.bind(this),this.onSoundEnded=this.onSoundEnded.bind(this),this.onResumeVjing=this.onResumeVjing.bind(this),this.onPauseVjing=this.onPauseVjing.bind(this),this.time=Date.now(),this.smoothRotationX=0,this.smoothRotationY=0,this.$ui=document.querySelector(".ui"),this.$helper=this.$ui.querySelector(".helper"),this.$credits=this.$ui.querySelector(".credits"),this.$brand=this.$ui.querySelector(".brand"),this.$logo=this.$ui.querySelector(".logo"),this.$crosses=this.$ui.querySelectorAll(".cross"),window.app=P({debug:!1}),window.app.camera.position.z=1200,window.app.camera.lookAt(new THREE.Vector3(0,0,0)),window.app.css3DCamera.position.z=1200,window.app.css3DCamera.lookAt(new THREE.Vector3(0,0,0)),this.FXAAPass=new WAGNER.FXAAPass,this.postFXPass=new WAGNER.Pass,this.postFXPass.shader=WAGNER.processShader(WAGNER.basicVs,x(["#define GLSLIFY 1\nuniform sampler2D tInput;\n\nvarying vec2 vUv;\n\nuniform float divide;\nuniform float mirrorX; \nuniform float mirrorY; \nuniform float morph;\n\nvoid main() {\n    \n    vec2 uv = vUv;\n    \n    // Mirror x\n    if (mirrorX > 0.) {\n        uv.x = abs(vUv.x-.5)+.5;\n    }\n    \n    // Mirror y\n    if (mirrorY > 0.) {\n        uv.y = abs(vUv.y-.5)+.5;\n    }\n\n    // Split\n    uv *= divide; uv = mod(uv,vec2(1.));\n    // if (uv.x > 0.5 && uv.y > 0.5) uv *= 2.; uv = mod(uv,vec2(1.));\n    // if (vUv.x > 0.5 && vUv.y > 0.5) uv *= 2.; uv = mod(uv,vec2(1.));\n    \n    // if (vUv.x > 0.5 && vUv.y > 0.5) uv *= 2.; uv = mod(uv,vec2(1.));\n    // if (vUv.x <= 0.5 && vUv.y <= 0.5) uv *= 2.; uv = mod(uv,vec2(1.));\n    // if (vUv.x > 0.5 && vUv.y > 0.75 && vUv.x <= 0.75) uv *= 2.; uv = mod(uv,vec2(1.));\n    // if (vUv.y < 0.5 && vUv.y >= 0.25 && vUv.x <= 0.25) uv *= 2.; uv = mod(uv,vec2(1.));\n\n    vec4 color = texture2D(tInput, uv);\n\n    // Morph\n    if (morph > 0.) {\n        color = texture2D(tInput, vec2(sin(vUv.x * 3.14), sin(vUv.y * 3.14)));\n    }\n\n    gl_FragColor = color;\n\n}"])),this.postFXPass.shader.uniforms.divide.value=1,this.postFXPass.shader.uniforms.mirrorX.value=0,this.postFXPass.shader.uniforms.mirrorY.value=0,this.postFXPass.shader.uniforms.morph.value=0,h["default"].start(),m["default"].start(),E["default"].start(),w["default"].start(),g["default"].start(),C["default"].start(),this.ui=new THREE.CSS3DObject(this.$ui),this.ui.position.x=18,this.ui.position.y=18,this.ui.position.z=0,window.app.css3DScene.add(this.ui),this.circles=new B["default"],this.circles.position.x=140,this.circles.position.y=18,this.circles.position.z=-1,window.app.scene.add(this.circles),this.background=new T["default"],this.background.position.x=18,this.background.position.y=18,this.background.position.z=0,window.app.scene.add(this.background),this.supershape=new D["default"](180),this.supershape.scale.x=this.supershape.scale.y=this.supershape.scale.z=.01,this.supershape.position.x=-18,this.supershape.position.y=-18,this.supershape.position.z=300,window.app.scene.add(this.supershape);var t=s["default"].getPalette();c["default"].emit(f["default"].PALETTE_CHANGE,t),h["default"].bind("main",this.render),c["default"].on(f["default"].MOUSE_DOWN,this.onMouseDown),c["default"].on(f["default"].MOUSE_UP,this.onMouseUp),c["default"].on(f["default"].PLAY_EFFECT,this.onPlayEffect),c["default"].on(f["default"].SPLIT_EFFECT,this.onSplitEffect),c["default"].on(f["default"].SOUND_ENDED,this.onSoundEnded),c["default"].on(f["default"].RESUME_VJING,this.onResumeVjing),c["default"].on(f["default"].PAUSE_VJING,this.onPauseVjing),window.addEventListener("resize",this.resize.bind(this),!0)}return i(e,[{key:"onSoundEnded",value:function(){var e=this;window.vjPlaying=!1,TweenMax.delayedCall(.6,function(){e.pauseVjing()})}},{key:"onMouseDown",value:function(){window.vjPlaying||(this.supershape.display(),TweenMax.to([window.app.camera.position,window.app.css3DCamera.position],.6,{z:1400,ease:Power2.easeOut}),TweenMax.to([this.$helper,this.$logo],.3,{opacity:0,ease:Power2.easeOut}))}},{key:"onMouseUp",value:function(){window.vjPlaying||(window.vjPlaying=!0,this.$ui.classList.add("ui--white"),this.playVjing())}},{key:"onPlayEffect",value:function(e){var t=e.disallow;if(this.postFXPass.shader.uniforms.divide.value=s["default"].range([1,1,2,2,4]),this.postFXPass.shader.uniforms.mirrorX.value=s["default"].lucky(2),this.postFXPass.shader.uniforms.mirrorY.value=s["default"].lucky(2),this.postFXPass.shader.uniforms.divide.value<4?this.postFXPass.shader.uniforms.morph.value=s["default"].lucky(2):this.postFXPass.shader.uniforms.morph.value=0,!t){var n=s["default"].getPalette();c["default"].emit(f["default"].PALETTE_CHANGE,n)}this.background.scale.x=this.background.scale.y=s["default"].range([1,6]),t||(this.$logo.style.opacity=~~(2*Math.random())),this.background.scale.x>1?TweenMax.to(window.app.camera.position,.15,{z:500*Math.random()+600,ease:Power2.easeOut}):TweenMax.to(window.app.camera.position,.15,{z:500*Math.random()+800,ease:Power2.easeOut})}},{key:"onSplitEffect",value:function(e){this.postFXPass.shader.uniforms.divide.value=e,this.postFXPass.shader.uniforms.morph.value=1}},{key:"onResumeVjing",value:function(){this.playVjing(!1)}},{key:"onPauseVjing",value:function(){this.pauseVjing()}},{key:"playVjing",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:!0,t=new TimelineMax({onComplete:function(){e&&E["default"].play()}});t.to(this.background.scale,.6,{x:window.innerWidth/400,y:window.innerHeight/400,ease:Power2.easeOut},0),t.to([window.app.camera.position,window.app.css3DCamera.position],.6,{z:1200,ease:Power2.easeOut},0),t.to([this.$credits,this.$brand,this.$crosses],.3,{opacity:0,ease:Power2.easeOut},0)}},{key:"pauseVjing",value:function(){var e=this;this.postFXPass.shader.uniforms.divide.value=1,this.postFXPass.shader.uniforms.mirrorX.value=0,this.postFXPass.shader.uniforms.mirrorY.value=0,this.postFXPass.shader.uniforms.morph.value=0,this.background.scale.x=window.innerWidth/400,this.background.scale.y=window.innerHeight/400,this.$logo.style.opacity=1;var t=new TimelineMax;t.to(window.app.camera.position,.7,{z:1200,ease:Power2.easeOut},0),t.to(this.background.scale,.7,{x:1,y:1,ease:Power2.easeOut},0),t.to(this.supershape.scale,.7,{x:.7,y:.7,z:.7,ease:Power2.easeOut},0),t.to([this.$ui,this.$crosses,this.$brand,this.$credits,this.$logo],.7,{opacity:1,ease:Power2.easeOut}),t.addCallback(function(){e.circles.display()},.3)}},{key:"render",value:function(){this.update(),window.app.css3DRenderer.render(window.app.css3DScene,window.app.css3DCamera),window.app.renderer.autoClearColor=!0,window.app.composer.reset(),window.app.composer.render(window.app.scene,window.app.camera),window.app.composer.pass(this.postFXPass),window.app.composer.pass(this.FXAAPass),window.app.composer.toScreen()}},{key:"update",value:function(){this.supershape.update(this.time);var e=s["default"].map(window.mouse.y,0,window.innerHeight,-.1,.1),t=s["default"].map(window.mouse.x,0,window.innerWidth,-.1,.1);this.smoothRotationX+=.1*(e-this.smoothRotationX),this.smoothRotationY+=.1*(t-this.smoothRotationY),window.app.scene.rotation.x=2*this.smoothRotationX,window.app.scene.rotation.y=2*this.smoothRotationY,window.app.scene.position.x=100*this.smoothRotationX,window.app.scene.position.y=100*this.smoothRotationY,window.app.css3DScene.rotation.x=this.smoothRotationX,window.app.css3DScene.rotation.y=this.smoothRotationY,window.app.css3DScene.position.x=50*this.smoothRotationX,window.app.css3DScene.position.y=50*this.smoothRotationY}},{key:"resize",value:function(){window.app.resize(window.innerWidth,window.innerHeight)}}]),e}();new O},{"./app/Background":32,"./app/Circles":33,"./app/Supershape":34,"./controllers/EffectController":37,"./controllers/KeyboardController":38,"./controllers/ShapeController":39,"./events/Events":40,"./events/EventsManager":41,"./managers/InteractionManager":42,"./managers/RafManager":43,"./managers/SoundManager":44,"./util/Utils":46,"./util/createApp":47,glslify:9}],32:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),u=e("../events/EventsManager"),c=o(u),l=e("../events/Events"),f=o(l),d=function(e){function t(){r(this,t);var e=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.onPaletteChange=e.onPaletteChange.bind(e),e.geometry=new THREE.PlaneGeometry(600,600),e.material=new THREE.MeshBasicMaterial({color:16711680}),e.mesh=new THREE.Mesh(e.geometry,e.material),e.add(e.mesh),c["default"].on(f["default"].PALETTE_CHANGE,e.onPaletteChange),e}return a(t,e),s(t,[{key:"onPaletteChange",value:function(e){this.material.color.set(new THREE.Color(e.background))}}]),t}(THREE.Object3D);n["default"]=d},{"../events/Events":40,"../events/EventsManager":41}],33:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),u=e("../events/EventsManager"),c=o(u),l=e("../events/Events"),f=o(l),d=function(e){function t(){r(this,t);var e=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));e.onMouseDown=e.onMouseDown.bind(e),e.material=new THREE.MeshBasicMaterial({color:14540253,transparent:!0}),e.meshes=[];for(var n=0;6>n;n++){var o=new THREE.RingGeometry(223+50*n,225+50*n,64,1),a=new THREE.Mesh(o,e.material);a.position.z=10*-(6-n)*4,a.initialDepth=a.position.z,e.add(a),e.meshes[n]=a}return c["default"].on(f["default"].MOUSE_DOWN,e.onMouseDown),e}return a(t,e),s(t,[{key:"display",value:function(){for(var e=new TimelineMax,t=0;t<this.meshes.length;t++)e.fromTo(this.meshes[t].scale,.6,{x:.88,y:.88},{x:1,y:1,ease:Power2.easeOut},.06*t)}},{key:"hide",value:function(){}},{key:"onMouseDown",value:function(){for(var e=new TimelineMax,t=0;t<this.meshes.length;t++)e.to(this.meshes[t].scale,.6,{x:1.12,y:1.12,ease:Power2.easeOut},.06*t)}}]),t}(THREE.Object3D);n["default"]=d},{"../events/Events":40,"../events/EventsManager":41}],34:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),u=e("../events/EventsManager"),c=o(u),l=e("../events/Events"),f=o(l),d=e("../controllers/ShapeController"),h=o(d),p=e("glslify"),m=function(e){function t(e){r(this,t);var n=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));n.radius=e,n.onPaletteChange=n.onPaletteChange.bind(n),n.geometry=new THREE.Geometry;for(var o=.05,a=parseInt(2*Math.PI/o+1.3462),s=parseInt(Math.PI/o+1.5),u=0;a>u;u++)for(var l=-Math.PI+u*o,d=n.supershape(l,0,0,0,0,1,1),h=0;s>h;h++){var m=-Math.PI/2+h*o,v=n.supershape(m,0,0,0,0,1,1),E=d*Math.cos(l)*v*Math.cos(m)*30,y=d*Math.sin(l)*v*Math.cos(m)*30,w=v*Math.sin(m)*30;n.geometry.vertices.push(new THREE.Vector3(E,y,w))}for(var b=0;a-1>b;b++)for(var g=0;s-1>g;g++){var F=(b+1)*s+g,C=(b+1)*s+g+1,A=b*s+g+1,D=b*s+g;n.geometry.faces.push(new THREE.Face3(F,C,D)),n.geometry.faces.push(new THREE.Face3(C,A,D))}return n.geometry.computeFaceNormals(),n.geometry.computeVertexNormals(),n.material=new THREE.ShaderMaterial({vertexShader:p(["precision mediump float;\n#define GLSLIFY 1\n\nuniform mat4 u_projectionMat;\nuniform mat4 u_modelviewMat;\nuniform mat3 u_normalMat;\nuniform vec3 u_diffuse;\n\nvarying vec3 v_eyeNormal;\nvarying vec3 v_diffuse;\n\nvoid main() {\n\n    v_eyeNormal = normalMatrix * normal;\n    v_diffuse = u_diffuse;\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\n}"]),fragmentShader:p(["precision mediump float;\n#define GLSLIFY 1\nvarying vec3 v_eyeNormal;\nvarying vec3 v_diffuse;\n\nuniform vec3 u_light;\nuniform vec3 u_ambient;\nuniform vec3 u_specular;\nuniform float u_shine;\nuniform float u_celShading;\n\nuniform vec3 color1;\nuniform vec3 color2;\nuniform vec3 color3;\nuniform vec3 color4;\nuniform vec3 color5;\n\nfloat celShade(float d) {\n  float E = 0.05;\n  d *= u_celShading;\n  float r = 1.0 / (u_celShading-0.5);\n  float fd = floor(d);\n  float dr = d * r;\n  if (d > fd-E && d < fd+E) {\n    float last = (fd - sign(d - fd))*r;\n    return mix(last, fd*r, \n      smoothstep((fd-E)*r, (fd+E)*r, dr));\n  } else {\n    return fd*r;\n  }\n}\n\nvoid main() {\n  vec3 en = normalize(v_eyeNormal);\n  vec3 ln = normalize(u_light);\n  vec3 hn = normalize(ln + vec3(0, 0, 1));\n  float E = 0.05;\n\n  float df = max(0.0, dot(en, ln));\n  float sf = max(0.0, dot(en, hn));\n\n  float cdf = celShade(df);  \n\n  sf = pow(sf, u_shine);\n\n  if (sf > 0.5 - E && sf < 0.5 + E) {\n    sf = smoothstep(0.5 - E, 0.5 + E, sf);\n  } else {\n    sf = step(0.5, sf);\n  }\n\n  float csf = sf;\n\n  vec3 color = u_ambient + cdf * v_diffuse + csf * u_specular;\n\n  // REMINDER (garder ça + color postpro = duotone)\n  // REMINDER (garder ça + color postpro = duotone)\n  // REMINDER (garder ça + color postpro = duotone)\n  if (color.g > 0.85) color = color5;\n  else if (color.g > 0.7) color = color4;\n  else if (color.g > 0.4) color = color3;\n  // else if (color.g > 0.1) color = color2;\n  // else color = color1;\n  else color = color2;\n\n  gl_FragColor = vec4(color, 1.0);\n}"]),uniforms:{u_diffuse:{type:"c",value:new THREE.Color(53619)},u_light:{type:"v3",value:new THREE.Vector3(.25,.25,1)},u_ambient:{type:"v3",value:new THREE.Vector3(.1,.1,.1)},u_specular:{type:"v3",value:new THREE.Vector3(.5,.5,.5)},u_shine:{type:"f",value:1e3},u_celShading:{type:"f",value:10},color1:{type:"c",value:new THREE.Color(16756018)},color2:{type:"c",value:new THREE.Color(8720506)},color3:{type:"c",value:new THREE.Color(1447446)},color4:{type:"c",value:new THREE.Color(16777028)},color5:{type:"c",value:new THREE.Color(16756018)}}}),n.outlineMaterial=new THREE.ShaderMaterial({vertexShader:p(["precision mediump float;\n#define GLSLIFY 1\n\nuniform float u_offset;\n\nvoid main() {\n  vec4 p = vec4(position + normal * u_offset, 1.0);\n  gl_Position = projectionMatrix * modelViewMatrix * p;\n}"]),fragmentShader:p(["precision mediump float;\n#define GLSLIFY 1\n\nuniform vec3 u_color;\n\nvoid main() {\n  gl_FragColor = vec4(u_color, 1.0);\n}"]),uniforms:{u_offset:{type:"f",value:4.2},u_color:{type:"c",value:new THREE.Color(0)}}}),n.outlineMaterial.side=THREE.BackSide,n.thinOutlineMaterial=new THREE.ShaderMaterial({vertexShader:p(["precision mediump float;\n#define GLSLIFY 1\n\nuniform float u_offset;\n\nvoid main() {\n  vec4 p = vec4(position + normal * u_offset, 1.0);\n  gl_Position = projectionMatrix * modelViewMatrix * p;\n}"]),fragmentShader:p(["precision mediump float;\n#define GLSLIFY 1\n\nuniform vec3 u_color;\n\nvoid main() {\n  gl_FragColor = vec4(u_color, 1.0);\n}"]),uniforms:{u_offset:{type:"f",value:1},u_color:{type:"c",value:new THREE.Color(65280)}}}),n.thinOutlineMaterial.side=THREE.BackSide,n.shape=new THREE.Mesh(n.geometry,n.material),n.outline=new THREE.Mesh(n.geometry,n.outlineMaterial),n.thinOutline=new THREE.Mesh(n.geometry,n.thinOutlineMaterial),n.add(n.shape),n.add(n.outline),n.add(n.thinOutline),c["default"].on(f["default"].PALETTE_CHANGE,n.onPaletteChange),n}return a(t,e),s(t,[{key:"display",value:function(){TweenMax.to(this.scale,.6,{x:1,y:1,z:1,ease:Power2.easeOut})}},{key:"hide",value:function(){}},{key:"draw",value:function(){for(var e=h["default"].get(),t=e.m1,n=e.n11,o=e.n21,r=e.n31,i=e.m2,a=e.n12,s=e.n22,u=e.n32,c=.05,l=parseInt(2*Math.PI/c+1.3462),f=parseInt(Math.PI/c+1.5),d=0,p=0;l>p;p++)for(var m=-Math.PI+p*c,v=this.supershape(m,t,n,o,r,1,1),E=0;f>E;E++){var y=-Math.PI/2+E*c,w=this.supershape(y,i,a,s,u,1,1),b=v*Math.cos(m)*w*Math.cos(y)*this.radius,g=v*Math.sin(m)*w*Math.cos(y)*this.radius,F=w*Math.sin(y)*this.radius;this.geometry.vertices[d].set(b,g,F),d++}this.geometry.computeFaceNormals(),this.geometry.computeVertexNormals(),this.geometry.verticesNeedUpdate=!0}},{key:"onPaletteChange",value:function(e){this.material.uniforms.color1.value=new THREE.Color(e.shape[0]),this.material.uniforms.color2.value=new THREE.Color(e.shape[1]),this.material.uniforms.color3.value=new THREE.Color(e.shape[2]),this.material.uniforms.color4.value=new THREE.Color(e.shape[3]),this.material.uniforms.color5.value=new THREE.Color(e.shape[4]),this.outlineMaterial.uniforms.u_color.value=new THREE.Color(e.outline),this.thinOutlineMaterial.uniforms.u_color.value=new THREE.Color(e.thinOutline)}},{key:"supershape",value:function(e,t,n,o,r,i,a){var s=Math.abs(1/i*Math.cos(t*e/4));s=Math.pow(s,o);var u=Math.abs(1/a*Math.sin(t*e/4));u=Math.pow(u,r);var c=s+u,l=Math.pow(c,-1/n);return l}},{key:"update",value:function(){this.rotation.x+=.001,this.rotation.y+=.005,this.rotation.z+=.008,window.vjPlaying||this.draw()}}]),t}(THREE.Object3D);n["default"]=m},{"../controllers/ShapeController":39,"../events/Events":40,"../events/EventsManager":41,glslify:9}],35:[function(e,t,n){t.exports=[["#69D2E7","#A7DBD8","#E0E4CC","#F38630","#FA6900"],["#FE4365","#FC9D9A","#F9CDAD","#C8C8A9","#83AF9B"],["#EFEECC","#FE8B05","#FE0557","#400403","#0AABBA"],["#AAFF00","#FFAA00","#FF00AA","#AA00FF","#00AAFF"],["#ECD078","#D95B43","#C02942","#542437","#53777A"],["#E8DDCB","#CDB380","#036564","#033649","#031634"],["#490A3D","#BD1550","#E97F02","#F8CA00","#8A9B0F"],["#594F4F","#547980","#45ADA8","#9DE0AD","#E5FCC2"],["#00A0B0","#6A4A3C","#CC333F","#EB6841","#EDC951"],["#E94E77","#D68189","#C6A49A","#C6E5D9","#F4EAD5"],["#D9CEB2","#948C75","#D5DED9","#7A6A53","#99B2B7"],["#EFFFCD","#DCE9BE","#555152","#2E2633","#99173C"],["#3FB8AF","#7FC7AF","#DAD8A7","#FF9E9D","#FF3D7F"],["#413E4A","#73626E","#B38184","#F0B49E","#F7E4BE"],["#99B898","#FECEA8","#FF847C","#E84A5F","#2A363B"],["#FF4E50","#FC913A","#F9D423","#EDE574","#E1F5C4"],["#351330","#424254","#64908A","#E8CAA4","#CC2A41"],["#655643","#80BCA3","#F6F7BD","#E6AC27","#BF4D28"],["#FAD089","#FF9C5B","#F5634A","#ED303C","#3B8183"],["#FF9900","#424242","#E9E9E9","#BCBCBC","#3299BB"],["#EEE6AB","#C5BC8E","#696758","#45484B","#36393B"],["#F8B195","#F67280","#C06C84","#6C5B7B","#355C7D"],["#F04155","#FF823A","#F2F26F","#FFF7BD","#95CFB7"],["#F0D8A8","#3D1C00","#86B8B1","#F2D694","#FA2A00"],["#E8D5B7","#0E2430","#FC3A51","#F5B349","#E8D5B9"],["#AB526B","#BCA297","#C5CEAE","#F0E2A4","#F4EBC3"],["#607848","#789048","#C0D860","#F0F0D8","#604848"],["#1C2130","#028F76","#B3E099","#FFEAAD","#D14334"],["#A8E6CE","#DCEDC2","#FFD3B5","#FFAAA6","#FF8C94"],["#FC354C","#29221F","#13747D","#0ABFBC","#FCF7C5"],["#B9D3B0","#81BDA4","#B28774","#F88F79","#F6AA93"],["#230F2B","#F21D41","#EBEBBC","#BCE3C5","#82B3AE"],["#4E395D","#827085","#8EBE94","#CCFC8E","#DC5B3E"],["#DAD6CA","#1BB0CE","#4F8699","#6A5E72","#563444"],["#D1313D","#E5625C","#F9BF76","#8EB2C5","#615375"],["#8DCCAD","#988864","#FEA6A2","#F9D6AC","#FFE9AF"],["#CFFFDD","#B4DEC1","#5C5863","#A85163","#FF1F4C"],["#382F32","#FFEAF2","#FCD9E5","#FBC5D8","#F1396D"],["#B6D8C0","#C8D9BF","#DADABD","#ECDBBC","#FEDCBA"],["#A7C5BD","#E5DDCB","#EB7B59","#CF4647","#524656"],["#FFEDBF","#F7803C","#F54828","#2E0D23","#F8E4C1"],["#C1B398","#605951","#FBEEC2","#61A6AB","#ACCEC0"],["#FFFBB7","#A6F6AF","#66B6AB","#5B7C8D","#4F2958"],["#EFF3CD","#B2D5BA","#61ADA0","#248F8D","#605063"],["#FCFEF5","#E9FFE1","#CDCFB7","#D6E6C3","#FAFBE3"],["#0CA5B0","#4E3F30","#FEFEEB","#F8F4E4","#A5B3AA"],["#FFE181","#EEE9E5","#FAD3B2","#FFBA7F","#FF9C97"],["#A70267","#F10C49","#FB6B41","#F6D86B","#339194"],["#2D2D29","#215A6D","#3CA2A2","#92C7A3","#DFECE6"],["#F38A8A","#55443D","#A0CAB5","#CDE9CA","#F1EDD0"],["#F8EDD1","#D88A8A","#474843","#9D9D93","#C5CFC6"],["#1B325F","#9CC4E4","#E9F2F9","#3A89C9","#F26C4F"],["#BED6C7","#ADC0B4","#8A7E66","#A79B83","#BBB2A1"],["#82837E","#94B053","#BDEB07","#BFFA37","#E0E0E0"],["#312736","#D4838F","#D6ABB1","#D9D9D9","#C4FFEB"],["#E5EAA4","#A8C4A2","#69A5A4","#616382","#66245B"],["#395A4F","#432330","#853C43","#F25C5E","#FFA566"],["#FDFFD9","#FFF0B8","#FFD6A3","#FAAD8E","#142F30"],["#FBC599","#CDBB93","#9EAE8A","#335650","#F35F55"],["#C7FCD7","#D9D5A7","#D9AB91","#E6867A","#ED4A6A"],["#FFEFD3","#FFFEE4","#D0ECEA","#9FD6D2","#8B7A5E"],["#F1396D","#FD6081","#F3FFEB","#ACC95F","#8F9924"],["#F2E3C6","#FFC6A5","#E6324B","#2B2B2B","#353634"],["#59B390","#F0DDAA","#E47C5D","#E32D40","#152B3C"],["#512B52","#635274","#7BB0A8","#A7DBAB","#E4F5B1"],["#E65540","#F8ECC2","#65A8A6","#79896D","#FFFFFF"],["#CAFF42","#EBF7F8","#D0E0EB","#88ABC2","#49708A"],["#E4DED0","#ABCCBD","#7DBEB8","#181619","#E32F21"],["#058789","#503D2E","#D54B1A","#E3A72F","#F0ECC9"],["#EFD9B4","#D6A692","#A39081","#4D6160","#292522"],["#CC5D4C","#FFFEC6","#C7D1AF","#96B49C","#5B5847"],["#E0EFF1","#7DB4B5","#FFFFFF","#680148","#000000"],["#2D1B33","#F36A71","#EE887A","#E4E391","#9ABC8A"],["#360745","#D61C59","#E7D84B","#EFEAC5","#1B8798"],["#E3E8CD","#BCD8BF","#D3B9A3","#EE9C92","#FE857E"],["#FC284F","#FF824A","#FEA887","#F6E7F7","#D1D0D7"],["#FFB884","#F5DF98","#FFF8D4","#C0D1C2","#2E4347"],["#80A8A8","#909D9E","#A88C8C","#FF0D51","#7A8C89"],["#A1DBB2","#FEE5AD","#FACA66","#F7A541","#F45D4C"],["#641F5E","#676077","#65AC92","#C2C092","#EDD48E"],["#FFF3DB","#E7E4D5","#D3C8B4","#C84648","#703E3B"],["#D4F7DC","#DBE7B4","#DBC092","#E0846D","#F51441"],["#85847E","#AB6A6E","#F7345B","#353130","#CBCFB4"],["#E6B39A","#E6CBA5","#EDE3B4","#8B9E9B","#6D7578"],["#23192D","#FD0A54","#F57576","#FEBF97","#F5ECB7"],["#452E3C","#FF3D5A","#FFB969","#EAF27E","#3B8C88"],["#041122","#259073","#7FDA89","#C8E98E","#E6F99D"],["#B1E6D1","#77B1A9","#3D7B80","#270A33","#451A3E"],["#9D9E94","#C99E93","#F59D92","#E5B8AD","#D5D2C8"],["#FDCFBF","#FEB89F","#E23D75","#5F0D3B","#742365"],["#B7CBBF","#8C886F","#F9A799","#F4BFAD","#F5DABD"],["#F0FFC9","#A9DA88","#62997A","#72243D","#3B0819"],["#429398","#6B5D4D","#B0A18F","#DFCDB4","#FBEED3"],["#E6EBA9","#ABBB9F","#6F8B94","#706482","#703D6F"],["#44749D","#C6D4E1","#FFFFFF","#EBE7E0","#BDB8AD"],["#FA6A64","#7A4E48","#4A4031","#F6E2BB","#9EC6B8"],["#F6D76B","#FF9036","#D6254D","#FF5475","#FDEBA9"],["#E7EDEA","#FFC52C","#FB0C06","#030D4F","#CEECEF"],["#8D7966","#A8A39D","#D8C8B8","#E2DDD9","#F8F1E9"],["#F2E8C4","#98D9B6","#3EC9A7","#2B879E","#616668"],["#5CACC4","#8CD19D","#CEE879","#FCB653","#FF5254"]]},{}],36:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var o=[{background:1447446,outline:0,thinOutline:16726065,shape:[16726065,16703767,1482817,146789,1447446]},{background:11473753,outline:1447446,thinOutline:16715284,shape:[16756018,8720506,1447446,16777028,16756018]},{background:1184829,outline:1447446,thinOutline:9119684,shape:[16756018,16775616,1447446,1768134,859761]}];n["default"]=o},{}],37:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=e("../events/EventsManager"),s=o(a),u=e("../events/Events"),c=o(u),l=e("../util/Utils"),f=o(l),d=e("../colors/colorsPalette"),h=(o(d),function(){function e(){r(this,e),this.onKeypress=this.onKeypress.bind(this),this.paletteIndex=0,s["default"].on(c["default"].KEYPRESS,this.onKeypress)}return i(e,[{key:"onKeypress",value:function(e){switch(e){case"q":s["default"].emit(c["default"].SPLIT_EFFECT,1);break;case"w":s["default"].emit(c["default"].SPLIT_EFFECT,2);break;case"e":s["default"].emit(c["default"].SPLIT_EFFECT,4);break;case"r":var t=f["default"].getPalette();s["default"].emit(c["default"].PALETTE_CHANGE,t);break;case"t":break;case"y":}}}],[{key:"start",value:function(){e.instance||(e.instance=new e)}}]),e}());n["default"]=h},{"../colors/colorsPalette":36,"../events/Events":40,"../events/EventsManager":41,"../util/Utils":46}],38:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=e("../events/EventsManager"),s=o(a),u=e("../events/Events"),c=o(u),l=function(){function e(){r(this,e),this.onKeypress=this.onKeypress.bind(this),this.keys={113:"q",119:"w",101:"e",114:"r",116:"t",121:"y",32:"spacebar"},window.addEventListener("keypress",this.onKeypress)}return i(e,[{key:"onKeypress",value:function(e){s["default"].emit(c["default"].KEYPRESS,this.keys[e.keyCode])}}],[{key:"start",value:function(){e.instance||(e.instance=new e)}}]),e}();n["default"]=l},{"../events/Events":40,"../events/EventsManager":41}],39:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=e("../managers/RafManager"),s=o(a),u=e("../events/EventsManager"),c=(o(u),e("../events/Events")),l=(o(c),e("../util/Simple1DNoise")),f=o(l),d=e("../util/Utils"),h=o(d),p=new f["default"],m=function(){function e(){r(this,e),this.m1=0,this.n11=0,this.n21=0,this.n31=0,this.m2=0,this.n12=0,this.n22=0,this.n32=0,this.smoothM1=0,this.smoothN11=0,this.smoothN21=0,this.smoothN31=0,this.smoothM2=0,this.smoothN12=0,this.smoothN22=0,this.smoothN32=0,this.movingTime=0,this.playing=!1,this.prevMouse=new THREE.Vector2,this.update=this.update.bind(this),this.onHideShape=this.onHideShape.bind(this),s["default"].bind("mouseController",this.update)}return i(e,[{key:"onHideShape",value:function(){this.playing=!1}},{key:"update",value:function(){window.mousedown&&(window.mouse.x===this.prevMouse.x&&window.mouse.y===this.prevMouse.y||(this.movingTime+=1),this.m1=h["default"].map(p.getVal(.02*this.movingTime),0,1,.1,15),this.n11=h["default"].map(p.getVal(.02*(this.movingTime+10)),0,1,.1,100),this.n21=h["default"].map(p.getVal(.02*(this.movingTime+20)),0,1,.1,100),this.n31=h["default"].map(p.getVal(.02*(this.movingTime+30)),0,1,.1,100),this.m2=h["default"].map(p.getVal(.02*(this.movingTime+40)),0,1,.1,15),this.n12=h["default"].map(p.getVal(.02*(this.movingTime+50)),0,1,.1,100),this.n22=h["default"].map(p.getVal(.02*(this.movingTime+60)),0,1,.1,100),this.n32=h["default"].map(p.getVal(.02*(this.movingTime+70)),0,1,.1,100)),this.smoothM1+=.8*(this.m1-this.smoothM1),this.smoothN11+=.8*(this.n11-this.smoothN11),this.smoothN21+=.8*(this.n21-this.smoothN21),this.smoothN31+=.8*(this.n31-this.smoothN31),this.smoothM2+=.8*(this.m2-this.smoothM2),this.smoothN12+=.8*(this.n12-this.smoothN12),this.smoothN22+=.8*(this.n22-this.smoothN22),this.smoothN32+=.8*(this.n32-this.smoothN32),this.prevMouse.set(window.mouse.x,window.mouse.y)}}],[{key:"start",value:function(){e.instance||(e.instance=new e)}},{key:"get",value:function(){var t={m1:e.instance.smoothM1.toFixed(2),n11:e.instance.smoothN11.toFixed(2),n21:e.instance.smoothN21.toFixed(2),n31:e.instance.smoothN31.toFixed(2),m2:e.instance.smoothM2.toFixed(2),n12:e.instance.smoothN12.toFixed(2),n22:e.instance.smoothN22.toFixed(2),n32:e.instance.smoothN32.toFixed(2)};return t}}]),e}();n["default"]=m},{"../events/Events":40,"../events/EventsManager":41,"../managers/RafManager":43,"../util/Simple1DNoise":45,"../util/Utils":46}],40:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{
value:!0});var o={KEYPRESS:"custom_keypress",EFFECT_SPLIT:"effect_split",EFFECT_COLOR:"effect_color",PREPARE_VJING:"prepare_vjing",START_VJING:"start_vjing",DISPLAY_SHAPE:"display_shape",HIDE_SHAPE:"hide_shape",SOUND_ENDED:"sound_ended",DISPLAY_UI:"display_ui",MOUSE_DOWN:"mouse_down",MOUSE_UP:"mouse_up",PLAY_EFFECT:"play_effect",SPLIT_EFFECT:"split_effect",RESUME_VJING:"resume_vjing",PAUSE_VJING:"pause_vjing",PALETTE_CHANGE:"palette_change"};n["default"]=o},{}],41:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function(){function e(){o(this,e)}return r(e,null,[{key:"emit",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,o=e.eventsList[t];if(!o)return void console.warn("EventsManager :: Emit :: Currently no listeners for this event : ",t);for(var r=0,i=o.length;i>r;r++)o[r].fn(n)}},{key:"on",value:function(t,n){console.log("EventsManager :: ON ::",t),e.eventsList||(e.eventsList={}),e.eventsList[t]||(e.eventsList[t]=[]),e.eventsList[t].push({fn:n})}},{key:"once",value:function(t,n){var o=function r(o){e.off(t,r),n(o)};o._=n,e.on(t,o)}},{key:"off",value:function(t,n){var o=e.eventsList[t];if(!o)return void console.warn("EventsManager :: Off :: Currently no listeners for this event : ",t);if(!n)return void console.warn("EventsManager :: Off :: Callback is undefined");for(var r=[],i=0,a=o.length;a>i;i++){var s=o[i];s.fn!==n&&s.fn._!==n&&r.push(s)}r.length>0?e.eventsList[t]=r:delete e.eventsList[t]}}]),e}();n["default"]=i},{}],42:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=e("../events/EventsManager"),s=o(a),u=e("../events/Events"),c=o(u),l=function(){function e(){r(this,e)}return i(e,null,[{key:"start",value:function(){window.mouse=new THREE.Vector2,window.mousedown=!1,window.addEventListener("mousemove",e.onMousemove),window.addEventListener("touchmove",e.onTouchmove),window.addEventListener("mousedown",e.onMousedown),window.addEventListener("touchstart",e.onMousedown),window.addEventListener("mouseup",e.onMouseup),window.addEventListener("touchend",e.onMouseup)}},{key:"onMousemove",value:function(e){window.mouse.set(e.clientX,e.clientY)}},{key:"onTouchmove",value:function(e){e.preventDefault(),window.mouse.set(e.touches[0].clientX,e.touches[0].clientY)}},{key:"onMousedown",value:function(){window.mousedown=!0,s["default"].emit(c["default"].MOUSE_DOWN)}},{key:"onMouseup",value:function(){window.mousedown=!1,s["default"].emit(c["default"].MOUSE_UP)}}]),e}();n["default"]=l},{"../events/Events":40,"../events/EventsManager":41}],43:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function(){function e(){o(this,e),this.update=this.update.bind(this),this.binders=[],this.raf=null,this.now=Date.now(),this.time=this.now,this.deltaTime=0}return r(e,[{key:"update",value:function(){this.now=Date.now(),this.deltaTime=this.now-this.time,this.time=this.now;for(var e=0;e<this.binders.length;e++)this.binders[e].fn(this.deltaTime);this.raf=window.requestAnimationFrame(this.update)}}],[{key:"start",value:function(){e.INSTANCE||(e.INSTANCE=new e),e.INSTANCE.update()}},{key:"stop",value:function(){window.cancelAnimationFrame(e.INSTANCE.raf)}},{key:"bind",value:function(t,n){var o=e.INSTANCE;if("string"!=typeof t)return void console.error("RafManager :: Bind :: Invalid ID",t);if("function"!=typeof n)return void console.error("RafManager :: Bind :: Invalid Function",n);for(var r=0;r<o.binders.length;r++){var i=o.binders[r];if(i.id===t)return void console.warn("RafManager :: Bind :: ID already used !",t)}e.INSTANCE.binders.push({id:t,fn:n})}},{key:"unbind",value:function(t){for(var n=-1,o=e.INSTANCE,r=0;r<o.binders.length;r++)if(o.binders[r].id===t){n=r;break}n>-1&&o.binders.splice(n,1)}},{key:"debug",value:function(){console.table(e.INSTANCE.binders)}}]),e}();n["default"]=i},{}],44:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=e("../events/EventsManager"),s=o(a),u=e("../events/Events"),c=o(u),l=e("../managers/RafManager"),f=o(l),d=(e("web-audio-player"),e("web-audio-analyser")),h=e("analyser-frequency-average"),p=window.AudioContext||window.webkitAudioContext,m=p?new p:null,v=function(){function e(){r(this,e),this.ready=!1,this.tumtumTime=0,this.bumbumTime=0,this.onCanplay=this.onCanplay.bind(this),this.onEnded=this.onEnded.bind(this),this.update=this.update.bind(this),this.onKeyPress=this.onKeyPress.bind(this),this.player=new Audio,this.player.crossOrigin="Anonymous",this.player.addEventListener("canplay",this.onCanplay),this.player.addEventListener("ended",this.onEnded),this.player.src="../assets/sound/music.mp3",s["default"].on(c["default"].KEYPRESS,this.onKeyPress)}return i(e,[{key:"onCanplay",value:function(){this.ready||(this.ready=!0,this.audioUtil=d(this.player,m,{audible:!0,stereo:!1}),this.analyser=this.audioUtil.analyser,this.player.volume=0,e.pause())}},{key:"onEnded",value:function(){e.pause(),this.player.currentTime=0,s["default"].emit(c["default"].SOUND_ENDED)}},{key:"onKeyPress",value:function(t){"spacebar"===t&&window.vjPlaying&&(this.player.paused?(e.play(),s["default"].emit(c["default"].RESUME_VJING)):(e.pause(),s["default"].emit(c["default"].PAUSE_VJING)))}},{key:"update",value:function(){if(!this.player.paused){var e=this.audioUtil.frequencies(),t=h(this.analyser,e,246,700),n=h(this.analyser,e,20,70),o=Date.now()-this.tumtumTime>600,r=Date.now()-this.bumbumTime>600,i=Math.abs(this.tumtumTime-this.bumbumTime);o&&t>.5?(this.tumtumTime=Date.now(),s["default"].emit(c["default"].PLAY_EFFECT,{disallow:!1})):r&&n>.95&&i>300&&(this.bumbumTime=Date.now(),s["default"].emit(c["default"].PLAY_EFFECT,{disallow:!0}))}}}],[{key:"start",value:function(){e.instance||(e.instance=new e)}},{key:"play",value:function(){e.instance.player.play(),TweenMax.to(e.instance.player,.3,{volume:1,ease:Power2.easeOut,onComplete:function(){f["default"].bind("soundmanager",e.instance.update)}})}},{key:"pause",value:function(){f["default"].unbind("soundmanager"),TweenMax.to(e.instance.player,.3,{volume:0,ease:Power2.easeOut,onComplete:function(){e.instance.player.pause()}})}}]),e}();n["default"]=v},{"../events/Events":40,"../events/EventsManager":41,"../managers/RafManager":43,"analyser-frequency-average":1,"web-audio-analyser":19,"web-audio-player":20}],45:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:256,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;o(this,e),this.MAX_VERTICES=t,this.MAX_VERTICES_MASK=this.MAX_VERTICES-1,this.amplitude=n,this.scale=r,this.xMin=0,this.xMax=0,this.r=[];for(var i=0;i<this.MAX_VERTICES;++i)this.r[i]=Math.random()}return r(e,[{key:"getVal",value:function(e){var t=e*this.scale,n=Math.floor(t),o=t-n,r=o*o*(3-2*o);return this.xMin=n&this.MAX_VERTICES_MASK,this.xMax=this.xMin+1&this.MAX_VERTICES_MASK,this.lerp(this.r[this.xMin],this.r[this.xMax],r)*this.amplitude}},{key:"lerp",value:function(e,t,n){return e*(1-n)+t*n}}]),e}();n["default"]=i},{}],46:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=e("../colors/colors2.json"),a=function(){function e(){o(this,e)}return r(e,null,[{key:"map",value:function(e,t,n,o,r){return(e-t)/(n-t)*(r-o)+o}},{key:"lucky",value:function(e){return!~~(Math.random()*e)}},{key:"range",value:function(e){return e[~~(Math.random()*e.length)]}},{key:"getPalette",value:function(){var e=i[~~(Math.random()*i.length)];return{background:e[0],outline:e[1],thinOutline:e[2],shape:e}}}]),e}();n["default"]=a},{"../colors/colors2.json":35}],47:[function(e,t,n){"use strict";function o(){function e(){o&&console.log(r.info.render),r.render(s,a)}function t(e,t){a.aspect=e/t,a.updateProjectionMatrix(),r.setSize(e,t),l.aspect=e/t,l.updateProjectionMatrix(),u.setSize(e,t)}var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=n.debug||!1,r=new THREE.WebGLRenderer({antialias:!0});r.setClearColor(15329769,1),r.setSize(window.innerWidth,window.innerHeight),r.shadowMap.enabled=!0,r.shadowMap.type=THREE.PCFSoftShadowMap;var i=r.domElement;document.body.appendChild(i);var a=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,1,2e3),s=new THREE.Scene,u=new THREE.CSS3DRenderer;u.setSize(window.innerWidth,window.innerHeight),u.domElement.style.position="absolute",u.domElement.style.top=0,document.body.appendChild(u.domElement);var c=new THREE.Scene,l=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,1,2e3);WAGNER.vertexShadersPath="js/vertex-shaders",WAGNER.fragmentShadersPath="js/fragment-shaders";var f=new WAGNER.Composer(r,{useRGBA:!0});f.setSize(i.width,i.height);var d={renderer:r,composer:f,canvas:i,camera:a,scene:s,css3DRenderer:u,css3DCamera:l,css3DScene:c,render:e,resize:t};return d}e("three-orbit-controls")(THREE);t.exports=o},{"three-orbit-controls":17}]},{},[31]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
